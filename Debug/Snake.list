
Snake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004728  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  080048b0  080048b0  000148b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c74  08004c74  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004c74  08004c74  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c74  08004c74  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c74  08004c74  00014c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c78  08004c78  00014c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004c7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  2000000c  08004c88  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  08004c88  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cdfb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001af3  00000000  00000000  0002ce37  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c78  00000000  00000000  0002e930  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba0  00000000  00000000  0002f5a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ceea  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a944  00000000  00000000  0004d032  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b0bcc  00000000  00000000  00057976  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00108542  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003444  00000000  00000000  001085c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004898 	.word	0x08004898

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004898 	.word	0x08004898

080001c8 <lfsrrand>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t lfsr;
uint16_t lfsrrand()
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	lfsr ^= lfsr>>7;
 80001cc:	4b13      	ldr	r3, [pc, #76]	; (800021c <lfsrrand+0x54>)
 80001ce:	881b      	ldrh	r3, [r3, #0]
 80001d0:	09db      	lsrs	r3, r3, #7
 80001d2:	b29a      	uxth	r2, r3
 80001d4:	4b11      	ldr	r3, [pc, #68]	; (800021c <lfsrrand+0x54>)
 80001d6:	881b      	ldrh	r3, [r3, #0]
 80001d8:	4053      	eors	r3, r2
 80001da:	b29a      	uxth	r2, r3
 80001dc:	4b0f      	ldr	r3, [pc, #60]	; (800021c <lfsrrand+0x54>)
 80001de:	801a      	strh	r2, [r3, #0]
	lfsr ^= lfsr<<9;
 80001e0:	4b0e      	ldr	r3, [pc, #56]	; (800021c <lfsrrand+0x54>)
 80001e2:	881b      	ldrh	r3, [r3, #0]
 80001e4:	025b      	lsls	r3, r3, #9
 80001e6:	b21a      	sxth	r2, r3
 80001e8:	4b0c      	ldr	r3, [pc, #48]	; (800021c <lfsrrand+0x54>)
 80001ea:	881b      	ldrh	r3, [r3, #0]
 80001ec:	b21b      	sxth	r3, r3
 80001ee:	4053      	eors	r3, r2
 80001f0:	b21b      	sxth	r3, r3
 80001f2:	b29a      	uxth	r2, r3
 80001f4:	4b09      	ldr	r3, [pc, #36]	; (800021c <lfsrrand+0x54>)
 80001f6:	801a      	strh	r2, [r3, #0]
	lfsr ^= lfsr>>13;
 80001f8:	4b08      	ldr	r3, [pc, #32]	; (800021c <lfsrrand+0x54>)
 80001fa:	881b      	ldrh	r3, [r3, #0]
 80001fc:	0b5b      	lsrs	r3, r3, #13
 80001fe:	b29a      	uxth	r2, r3
 8000200:	4b06      	ldr	r3, [pc, #24]	; (800021c <lfsrrand+0x54>)
 8000202:	881b      	ldrh	r3, [r3, #0]
 8000204:	4053      	eors	r3, r2
 8000206:	b29a      	uxth	r2, r3
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <lfsrrand+0x54>)
 800020a:	801a      	strh	r2, [r3, #0]
	return lfsr;
 800020c:	4b03      	ldr	r3, [pc, #12]	; (800021c <lfsrrand+0x54>)
 800020e:	881b      	ldrh	r3, [r3, #0]
}
 8000210:	4618      	mov	r0, r3
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	20000196 	.word	0x20000196

08000220 <newGameStart>:
_Bool foodflag = 0;
void newGameStart(void)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
	// clean out the game grid
	for(int i=0; i<21; i++)
 8000226:	2300      	movs	r3, #0
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	e016      	b.n	800025a <newGameStart+0x3a>
	{
		for(int j=0; j<12; j++)
 800022c:	2300      	movs	r3, #0
 800022e:	603b      	str	r3, [r7, #0]
 8000230:	e00d      	b.n	800024e <newGameStart+0x2e>
			grid[i][j] = 0;
 8000232:	4921      	ldr	r1, [pc, #132]	; (80002b8 <newGameStart+0x98>)
 8000234:	687a      	ldr	r2, [r7, #4]
 8000236:	4613      	mov	r3, r2
 8000238:	005b      	lsls	r3, r3, #1
 800023a:	4413      	add	r3, r2
 800023c:	009b      	lsls	r3, r3, #2
 800023e:	18ca      	adds	r2, r1, r3
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	4413      	add	r3, r2
 8000244:	2200      	movs	r2, #0
 8000246:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<12; j++)
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	3301      	adds	r3, #1
 800024c:	603b      	str	r3, [r7, #0]
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	2b0b      	cmp	r3, #11
 8000252:	ddee      	ble.n	8000232 <newGameStart+0x12>
	for(int i=0; i<21; i++)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	3301      	adds	r3, #1
 8000258:	607b      	str	r3, [r7, #4]
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	2b14      	cmp	r3, #20
 800025e:	dde5      	ble.n	800022c <newGameStart+0xc>
	}
	// putting the snake with length 3 between (4,6) and (6,6)
	grid[4][6] = RIGHT;
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <newGameStart+0x98>)
 8000262:	2203      	movs	r2, #3
 8000264:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	grid[5][6] = RIGHT;
 8000268:	4b13      	ldr	r3, [pc, #76]	; (80002b8 <newGameStart+0x98>)
 800026a:	2203      	movs	r2, #3
 800026c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	grid[6][6] = RIGHT;
 8000270:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <newGameStart+0x98>)
 8000272:	2203      	movs	r2, #3
 8000274:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	// (6,6) is the initial position for snake's head
	hx = 6;
 8000278:	4b10      	ldr	r3, [pc, #64]	; (80002bc <newGameStart+0x9c>)
 800027a:	2206      	movs	r2, #6
 800027c:	701a      	strb	r2, [r3, #0]
	hy = 6;
 800027e:	4b10      	ldr	r3, [pc, #64]	; (80002c0 <newGameStart+0xa0>)
 8000280:	2206      	movs	r2, #6
 8000282:	701a      	strb	r2, [r3, #0]
	// (4,6) is the initial position for snake's tail
	tx = 4;
 8000284:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <newGameStart+0xa4>)
 8000286:	2204      	movs	r2, #4
 8000288:	701a      	strb	r2, [r3, #0]
	ty = 6;
 800028a:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <newGameStart+0xa8>)
 800028c:	2206      	movs	r2, #6
 800028e:	701a      	strb	r2, [r3, #0]
	// initial moving direction of snake is towards right
	dx = 1;
 8000290:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <newGameStart+0xac>)
 8000292:	2201      	movs	r2, #1
 8000294:	701a      	strb	r2, [r3, #0]
	dy = 0;
 8000296:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <newGameStart+0xb0>)
 8000298:	2200      	movs	r2, #0
 800029a:	701a      	strb	r2, [r3, #0]
	// giving the LFSR pseudo-random number generator a seed from the timer
	lfsr = TIM1->CNT;
 800029c:	4b0d      	ldr	r3, [pc, #52]	; (80002d4 <newGameStart+0xb4>)
 800029e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002a0:	b29a      	uxth	r2, r3
 80002a2:	4b0d      	ldr	r3, [pc, #52]	; (80002d8 <newGameStart+0xb8>)
 80002a4:	801a      	strh	r2, [r3, #0]
	//
	foodflag = 0;
 80002a6:	4b0d      	ldr	r3, [pc, #52]	; (80002dc <newGameStart+0xbc>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	701a      	strb	r2, [r3, #0]
}
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	20000034 	.word	0x20000034
 80002bc:	200001e6 	.word	0x200001e6
 80002c0:	20000030 	.word	0x20000030
 80002c4:	20000194 	.word	0x20000194
 80002c8:	200001e5 	.word	0x200001e5
 80002cc:	20000195 	.word	0x20000195
 80002d0:	200001e4 	.word	0x200001e4
 80002d4:	40012c00 	.word	0x40012c00
 80002d8:	20000196 	.word	0x20000196
 80002dc:	20000028 	.word	0x20000028

080002e0 <checkSnakeCrash>:

uint8_t checkSnakeCrash(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
	return ((hx+dx)==-1||(hx+dx)==21||(hy+dy)==12||((hy+dy)==-1))||(grid[hx+dx][hy+dy] > 0 && grid[hx+dx][hy+dy]<5);
 80002e4:	4b33      	ldr	r3, [pc, #204]	; (80003b4 <checkSnakeCrash+0xd4>)
 80002e6:	f993 3000 	ldrsb.w	r3, [r3]
 80002ea:	461a      	mov	r2, r3
 80002ec:	4b32      	ldr	r3, [pc, #200]	; (80003b8 <checkSnakeCrash+0xd8>)
 80002ee:	f993 3000 	ldrsb.w	r3, [r3]
 80002f2:	4413      	add	r3, r2
 80002f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002f8:	d052      	beq.n	80003a0 <checkSnakeCrash+0xc0>
 80002fa:	4b2e      	ldr	r3, [pc, #184]	; (80003b4 <checkSnakeCrash+0xd4>)
 80002fc:	f993 3000 	ldrsb.w	r3, [r3]
 8000300:	461a      	mov	r2, r3
 8000302:	4b2d      	ldr	r3, [pc, #180]	; (80003b8 <checkSnakeCrash+0xd8>)
 8000304:	f993 3000 	ldrsb.w	r3, [r3]
 8000308:	4413      	add	r3, r2
 800030a:	2b15      	cmp	r3, #21
 800030c:	d048      	beq.n	80003a0 <checkSnakeCrash+0xc0>
 800030e:	4b2b      	ldr	r3, [pc, #172]	; (80003bc <checkSnakeCrash+0xdc>)
 8000310:	f993 3000 	ldrsb.w	r3, [r3]
 8000314:	461a      	mov	r2, r3
 8000316:	4b2a      	ldr	r3, [pc, #168]	; (80003c0 <checkSnakeCrash+0xe0>)
 8000318:	f993 3000 	ldrsb.w	r3, [r3]
 800031c:	4413      	add	r3, r2
 800031e:	2b0c      	cmp	r3, #12
 8000320:	d03e      	beq.n	80003a0 <checkSnakeCrash+0xc0>
 8000322:	4b26      	ldr	r3, [pc, #152]	; (80003bc <checkSnakeCrash+0xdc>)
 8000324:	f993 3000 	ldrsb.w	r3, [r3]
 8000328:	461a      	mov	r2, r3
 800032a:	4b25      	ldr	r3, [pc, #148]	; (80003c0 <checkSnakeCrash+0xe0>)
 800032c:	f993 3000 	ldrsb.w	r3, [r3]
 8000330:	4413      	add	r3, r2
 8000332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000336:	d033      	beq.n	80003a0 <checkSnakeCrash+0xc0>
 8000338:	4b1e      	ldr	r3, [pc, #120]	; (80003b4 <checkSnakeCrash+0xd4>)
 800033a:	f993 3000 	ldrsb.w	r3, [r3]
 800033e:	461a      	mov	r2, r3
 8000340:	4b1d      	ldr	r3, [pc, #116]	; (80003b8 <checkSnakeCrash+0xd8>)
 8000342:	f993 3000 	ldrsb.w	r3, [r3]
 8000346:	441a      	add	r2, r3
 8000348:	4b1c      	ldr	r3, [pc, #112]	; (80003bc <checkSnakeCrash+0xdc>)
 800034a:	f993 3000 	ldrsb.w	r3, [r3]
 800034e:	4619      	mov	r1, r3
 8000350:	4b1b      	ldr	r3, [pc, #108]	; (80003c0 <checkSnakeCrash+0xe0>)
 8000352:	f993 3000 	ldrsb.w	r3, [r3]
 8000356:	4419      	add	r1, r3
 8000358:	481a      	ldr	r0, [pc, #104]	; (80003c4 <checkSnakeCrash+0xe4>)
 800035a:	4613      	mov	r3, r2
 800035c:	005b      	lsls	r3, r3, #1
 800035e:	4413      	add	r3, r2
 8000360:	009b      	lsls	r3, r3, #2
 8000362:	4403      	add	r3, r0
 8000364:	440b      	add	r3, r1
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d01b      	beq.n	80003a4 <checkSnakeCrash+0xc4>
 800036c:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <checkSnakeCrash+0xd4>)
 800036e:	f993 3000 	ldrsb.w	r3, [r3]
 8000372:	461a      	mov	r2, r3
 8000374:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <checkSnakeCrash+0xd8>)
 8000376:	f993 3000 	ldrsb.w	r3, [r3]
 800037a:	441a      	add	r2, r3
 800037c:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <checkSnakeCrash+0xdc>)
 800037e:	f993 3000 	ldrsb.w	r3, [r3]
 8000382:	4619      	mov	r1, r3
 8000384:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <checkSnakeCrash+0xe0>)
 8000386:	f993 3000 	ldrsb.w	r3, [r3]
 800038a:	4419      	add	r1, r3
 800038c:	480d      	ldr	r0, [pc, #52]	; (80003c4 <checkSnakeCrash+0xe4>)
 800038e:	4613      	mov	r3, r2
 8000390:	005b      	lsls	r3, r3, #1
 8000392:	4413      	add	r3, r2
 8000394:	009b      	lsls	r3, r3, #2
 8000396:	4403      	add	r3, r0
 8000398:	440b      	add	r3, r1
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2b04      	cmp	r3, #4
 800039e:	d801      	bhi.n	80003a4 <checkSnakeCrash+0xc4>
 80003a0:	2301      	movs	r3, #1
 80003a2:	e000      	b.n	80003a6 <checkSnakeCrash+0xc6>
 80003a4:	2300      	movs	r3, #0
 80003a6:	b2db      	uxtb	r3, r3
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	200001e6 	.word	0x200001e6
 80003b8:	20000195 	.word	0x20000195
 80003bc:	20000030 	.word	0x20000030
 80003c0:	200001e4 	.word	0x200001e4
 80003c4:	20000034 	.word	0x20000034

080003c8 <updateLCD>:

void updateLCD(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b088      	sub	sp, #32
 80003cc:	af02      	add	r7, sp, #8
	for(int i=0; i<21; i++)
 80003ce:	2300      	movs	r3, #0
 80003d0:	617b      	str	r3, [r7, #20]
 80003d2:	e102      	b.n	80005da <updateLCD+0x212>
	{
		for(int j=0; j<12; j++)
 80003d4:	2300      	movs	r3, #0
 80003d6:	613b      	str	r3, [r7, #16]
 80003d8:	e0f8      	b.n	80005cc <updateLCD+0x204>
		{
			if (grid[i][j] == 0)
 80003da:	4995      	ldr	r1, [pc, #596]	; (8000630 <updateLCD+0x268>)
 80003dc:	697a      	ldr	r2, [r7, #20]
 80003de:	4613      	mov	r3, r2
 80003e0:	005b      	lsls	r3, r3, #1
 80003e2:	4413      	add	r3, r2
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	18ca      	adds	r2, r1, r3
 80003e8:	693b      	ldr	r3, [r7, #16]
 80003ea:	4413      	add	r3, r2
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d126      	bne.n	8000440 <updateLCD+0x78>
			{
				for(int k=0; k<4; k++)
 80003f2:	2300      	movs	r3, #0
 80003f4:	60fb      	str	r3, [r7, #12]
 80003f6:	e01f      	b.n	8000438 <updateLCD+0x70>
				{
					for(int l=0; l<4; l++)
 80003f8:	2300      	movs	r3, #0
 80003fa:	60bb      	str	r3, [r7, #8]
 80003fc:	e016      	b.n	800042c <updateLCD+0x64>
						PCD8544_DrawPixel(4*i+k, 4*j+l, 0);
 80003fe:	697b      	ldr	r3, [r7, #20]
 8000400:	b2db      	uxtb	r3, r3
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	b2da      	uxtb	r2, r3
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	b2db      	uxtb	r3, r3
 800040a:	4413      	add	r3, r2
 800040c:	b2d8      	uxtb	r0, r3
 800040e:	693b      	ldr	r3, [r7, #16]
 8000410:	b2db      	uxtb	r3, r3
 8000412:	009b      	lsls	r3, r3, #2
 8000414:	b2da      	uxtb	r2, r3
 8000416:	68bb      	ldr	r3, [r7, #8]
 8000418:	b2db      	uxtb	r3, r3
 800041a:	4413      	add	r3, r2
 800041c:	b2db      	uxtb	r3, r3
 800041e:	2200      	movs	r2, #0
 8000420:	4619      	mov	r1, r3
 8000422:	f003 ff19 	bl	8004258 <PCD8544_DrawPixel>
					for(int l=0; l<4; l++)
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	3301      	adds	r3, #1
 800042a:	60bb      	str	r3, [r7, #8]
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	2b03      	cmp	r3, #3
 8000430:	dde5      	ble.n	80003fe <updateLCD+0x36>
				for(int k=0; k<4; k++)
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	3301      	adds	r3, #1
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	2b03      	cmp	r3, #3
 800043c:	dddc      	ble.n	80003f8 <updateLCD+0x30>
 800043e:	e0c2      	b.n	80005c6 <updateLCD+0x1fe>
				}
			}
			else if(grid[i][j] >0 && grid[i][j]<5)
 8000440:	497b      	ldr	r1, [pc, #492]	; (8000630 <updateLCD+0x268>)
 8000442:	697a      	ldr	r2, [r7, #20]
 8000444:	4613      	mov	r3, r2
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	4413      	add	r3, r2
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	18ca      	adds	r2, r1, r3
 800044e:	693b      	ldr	r3, [r7, #16]
 8000450:	4413      	add	r3, r2
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d032      	beq.n	80004be <updateLCD+0xf6>
 8000458:	4975      	ldr	r1, [pc, #468]	; (8000630 <updateLCD+0x268>)
 800045a:	697a      	ldr	r2, [r7, #20]
 800045c:	4613      	mov	r3, r2
 800045e:	005b      	lsls	r3, r3, #1
 8000460:	4413      	add	r3, r2
 8000462:	009b      	lsls	r3, r3, #2
 8000464:	18ca      	adds	r2, r1, r3
 8000466:	693b      	ldr	r3, [r7, #16]
 8000468:	4413      	add	r3, r2
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b04      	cmp	r3, #4
 800046e:	d826      	bhi.n	80004be <updateLCD+0xf6>
			{
				for(int k=0; k<4; k++)
 8000470:	2300      	movs	r3, #0
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	e01f      	b.n	80004b6 <updateLCD+0xee>
				{
					for(int l=0; l<4; l++)
 8000476:	2300      	movs	r3, #0
 8000478:	603b      	str	r3, [r7, #0]
 800047a:	e016      	b.n	80004aa <updateLCD+0xe2>
						PCD8544_DrawPixel(4*i+k, 4*j+l, 1);
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	b2db      	uxtb	r3, r3
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	b2da      	uxtb	r2, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	4413      	add	r3, r2
 800048a:	b2d8      	uxtb	r0, r3
 800048c:	693b      	ldr	r3, [r7, #16]
 800048e:	b2db      	uxtb	r3, r3
 8000490:	009b      	lsls	r3, r3, #2
 8000492:	b2da      	uxtb	r2, r3
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	b2db      	uxtb	r3, r3
 8000498:	4413      	add	r3, r2
 800049a:	b2db      	uxtb	r3, r3
 800049c:	2201      	movs	r2, #1
 800049e:	4619      	mov	r1, r3
 80004a0:	f003 feda 	bl	8004258 <PCD8544_DrawPixel>
					for(int l=0; l<4; l++)
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	3301      	adds	r3, #1
 80004a8:	603b      	str	r3, [r7, #0]
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	2b03      	cmp	r3, #3
 80004ae:	dde5      	ble.n	800047c <updateLCD+0xb4>
				for(int k=0; k<4; k++)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	3301      	adds	r3, #1
 80004b4:	607b      	str	r3, [r7, #4]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	2b03      	cmp	r3, #3
 80004ba:	dddc      	ble.n	8000476 <updateLCD+0xae>
 80004bc:	e083      	b.n	80005c6 <updateLCD+0x1fe>
				}
			}
			else if(grid[i][j] == 5)
 80004be:	495c      	ldr	r1, [pc, #368]	; (8000630 <updateLCD+0x268>)
 80004c0:	697a      	ldr	r2, [r7, #20]
 80004c2:	4613      	mov	r3, r2
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	4413      	add	r3, r2
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	18ca      	adds	r2, r1, r3
 80004cc:	693b      	ldr	r3, [r7, #16]
 80004ce:	4413      	add	r3, r2
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	2b05      	cmp	r3, #5
 80004d4:	d177      	bne.n	80005c6 <updateLCD+0x1fe>
			{
				PCD8544_DrawPixel(4*i+1, 4*j, 1);
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	3301      	adds	r3, #1
 80004e0:	b2d8      	uxtb	r0, r3
 80004e2:	693b      	ldr	r3, [r7, #16]
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	2201      	movs	r2, #1
 80004ec:	4619      	mov	r1, r3
 80004ee:	f003 feb3 	bl	8004258 <PCD8544_DrawPixel>
				PCD8544_DrawPixel(4*i+2, 4*j, 1);
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	009b      	lsls	r3, r3, #2
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	3302      	adds	r3, #2
 80004fc:	b2d8      	uxtb	r0, r3
 80004fe:	693b      	ldr	r3, [r7, #16]
 8000500:	b2db      	uxtb	r3, r3
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	b2db      	uxtb	r3, r3
 8000506:	2201      	movs	r2, #1
 8000508:	4619      	mov	r1, r3
 800050a:	f003 fea5 	bl	8004258 <PCD8544_DrawPixel>
				PCD8544_DrawPixel(4*i+1, 4*j+3, 1);
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	b2db      	uxtb	r3, r3
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	b2db      	uxtb	r3, r3
 8000516:	3301      	adds	r3, #1
 8000518:	b2d8      	uxtb	r0, r3
 800051a:	693b      	ldr	r3, [r7, #16]
 800051c:	b2db      	uxtb	r3, r3
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	b2db      	uxtb	r3, r3
 8000522:	3303      	adds	r3, #3
 8000524:	b2db      	uxtb	r3, r3
 8000526:	2201      	movs	r2, #1
 8000528:	4619      	mov	r1, r3
 800052a:	f003 fe95 	bl	8004258 <PCD8544_DrawPixel>
				PCD8544_DrawPixel(4*i+2, 4*j+3, 1);
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	b2db      	uxtb	r3, r3
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	b2db      	uxtb	r3, r3
 8000536:	3302      	adds	r3, #2
 8000538:	b2d8      	uxtb	r0, r3
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	b2db      	uxtb	r3, r3
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	b2db      	uxtb	r3, r3
 8000542:	3303      	adds	r3, #3
 8000544:	b2db      	uxtb	r3, r3
 8000546:	2201      	movs	r2, #1
 8000548:	4619      	mov	r1, r3
 800054a:	f003 fe85 	bl	8004258 <PCD8544_DrawPixel>
				PCD8544_DrawPixel(4*i, 4*j+1, 1);
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	b2db      	uxtb	r3, r3
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	b2d8      	uxtb	r0, r3
 8000556:	693b      	ldr	r3, [r7, #16]
 8000558:	b2db      	uxtb	r3, r3
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	b2db      	uxtb	r3, r3
 800055e:	3301      	adds	r3, #1
 8000560:	b2db      	uxtb	r3, r3
 8000562:	2201      	movs	r2, #1
 8000564:	4619      	mov	r1, r3
 8000566:	f003 fe77 	bl	8004258 <PCD8544_DrawPixel>
				PCD8544_DrawPixel(4*i, 4*j+2, 1);
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	b2db      	uxtb	r3, r3
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	b2d8      	uxtb	r0, r3
 8000572:	693b      	ldr	r3, [r7, #16]
 8000574:	b2db      	uxtb	r3, r3
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	b2db      	uxtb	r3, r3
 800057a:	3302      	adds	r3, #2
 800057c:	b2db      	uxtb	r3, r3
 800057e:	2201      	movs	r2, #1
 8000580:	4619      	mov	r1, r3
 8000582:	f003 fe69 	bl	8004258 <PCD8544_DrawPixel>
				PCD8544_DrawPixel(4*i+3, 4*j+1, 1);
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	b2db      	uxtb	r3, r3
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	b2db      	uxtb	r3, r3
 800058e:	3303      	adds	r3, #3
 8000590:	b2d8      	uxtb	r0, r3
 8000592:	693b      	ldr	r3, [r7, #16]
 8000594:	b2db      	uxtb	r3, r3
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	b2db      	uxtb	r3, r3
 800059a:	3301      	adds	r3, #1
 800059c:	b2db      	uxtb	r3, r3
 800059e:	2201      	movs	r2, #1
 80005a0:	4619      	mov	r1, r3
 80005a2:	f003 fe59 	bl	8004258 <PCD8544_DrawPixel>
				PCD8544_DrawPixel(4*i+3, 4*j+2, 1);
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	3303      	adds	r3, #3
 80005b0:	b2d8      	uxtb	r0, r3
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	3302      	adds	r3, #2
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	2201      	movs	r2, #1
 80005c0:	4619      	mov	r1, r3
 80005c2:	f003 fe49 	bl	8004258 <PCD8544_DrawPixel>
		for(int j=0; j<12; j++)
 80005c6:	693b      	ldr	r3, [r7, #16]
 80005c8:	3301      	adds	r3, #1
 80005ca:	613b      	str	r3, [r7, #16]
 80005cc:	693b      	ldr	r3, [r7, #16]
 80005ce:	2b0b      	cmp	r3, #11
 80005d0:	f77f af03 	ble.w	80003da <updateLCD+0x12>
	for(int i=0; i<21; i++)
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	3301      	adds	r3, #1
 80005d8:	617b      	str	r3, [r7, #20]
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	2b14      	cmp	r3, #20
 80005de:	f77f aef9 	ble.w	80003d4 <updateLCD+0xc>
			}
		}
	}
	// drawing borders on LCD to make it clearer
	PCD8544_DrawLine(0, 0, 0, 47, PCD8544_Pixel_Set);
 80005e2:	2301      	movs	r3, #1
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	232f      	movs	r3, #47	; 0x2f
 80005e8:	2200      	movs	r2, #0
 80005ea:	2100      	movs	r1, #0
 80005ec:	2000      	movs	r0, #0
 80005ee:	f004 f837 	bl	8004660 <PCD8544_DrawLine>
	PCD8544_DrawLine(83, 0, 83, 47, PCD8544_Pixel_Set);
 80005f2:	2301      	movs	r3, #1
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	232f      	movs	r3, #47	; 0x2f
 80005f8:	2253      	movs	r2, #83	; 0x53
 80005fa:	2100      	movs	r1, #0
 80005fc:	2053      	movs	r0, #83	; 0x53
 80005fe:	f004 f82f 	bl	8004660 <PCD8544_DrawLine>
	PCD8544_DrawLine(0, 0, 83, 0, PCD8544_Pixel_Set);
 8000602:	2301      	movs	r3, #1
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	2253      	movs	r2, #83	; 0x53
 800060a:	2100      	movs	r1, #0
 800060c:	2000      	movs	r0, #0
 800060e:	f004 f827 	bl	8004660 <PCD8544_DrawLine>
	PCD8544_DrawLine(0, 47, 83, 47, PCD8544_Pixel_Set);
 8000612:	2301      	movs	r3, #1
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	232f      	movs	r3, #47	; 0x2f
 8000618:	2253      	movs	r2, #83	; 0x53
 800061a:	212f      	movs	r1, #47	; 0x2f
 800061c:	2000      	movs	r0, #0
 800061e:	f004 f81f 	bl	8004660 <PCD8544_DrawLine>

	PCD8544_Refresh();
 8000622:	f003 fea1 	bl	8004368 <PCD8544_Refresh>
}
 8000626:	bf00      	nop
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000034 	.word	0x20000034

08000634 <loseDialog>:

void loseDialog()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	PCD8544_GotoXY(20, 20);
 8000638:	2114      	movs	r1, #20
 800063a:	2014      	movs	r0, #20
 800063c:	f003 ff32 	bl	80044a4 <PCD8544_GotoXY>
	PCD8544_Puts("You Lose!", PCD8544_Pixel_Set, PCD8544_FontSize_5x7);
 8000640:	2200      	movs	r2, #0
 8000642:	2101      	movs	r1, #1
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <loseDialog+0x24>)
 8000646:	f003 fff1 	bl	800462c <PCD8544_Puts>
	PCD8544_Refresh();
 800064a:	f003 fe8d 	bl	8004368 <PCD8544_Refresh>
	HAL_TIM_Base_Stop_IT(&htim1);
 800064e:	4803      	ldr	r0, [pc, #12]	; (800065c <loseDialog+0x28>)
 8000650:	f003 f980 	bl	8003954 <HAL_TIM_Base_Stop_IT>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	080048b0 	.word	0x080048b0
 800065c:	20000198 	.word	0x20000198

08000660 <HAL_GPIO_EXTI_Callback>:

char keyPressed = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_8) //A,B,C,D
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000670:	f040 80b5 	bne.w	80007de <HAL_GPIO_EXTI_Callback+0x17e>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800067a:	48b6      	ldr	r0, [pc, #728]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800067c:	f001 fa5c 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000680:	2200      	movs	r2, #0
 8000682:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000686:	48b3      	ldr	r0, [pc, #716]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000688:	f001 fa56 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000692:	48b0      	ldr	r0, [pc, #704]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000694:	f001 fa50 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800069e:	48ad      	ldr	r0, [pc, #692]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80006a0:	f001 fa4a 	bl	8001b38 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_Pin)==1){
 80006a4:	88fb      	ldrh	r3, [r7, #6]
 80006a6:	4619      	mov	r1, r3
 80006a8:	48aa      	ldr	r0, [pc, #680]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80006aa:	f001 fa2d 	bl	8001b08 <HAL_GPIO_ReadPin>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d10c      	bne.n	80006ce <HAL_GPIO_EXTI_Callback+0x6e>
			GPIOD->ODR |= (0xF << 12);
 80006b4:	4ba7      	ldr	r3, [pc, #668]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80006b6:	695b      	ldr	r3, [r3, #20]
 80006b8:	4aa6      	ldr	r2, [pc, #664]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80006ba:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80006be:	6153      	str	r3, [r2, #20]
			keyPressed = 'D';
 80006c0:	4ba5      	ldr	r3, [pc, #660]	; (8000958 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80006c2:	2244      	movs	r2, #68	; 0x44
 80006c4:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 80006c6:	2064      	movs	r0, #100	; 0x64
 80006c8:	f000 ff70 	bl	80015ac <HAL_Delay>
			return;
 80006cc:	e2bf      	b.n	8000c4e <HAL_GPIO_EXTI_Callback+0x5ee>
		}
		//
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d4:	489f      	ldr	r0, [pc, #636]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80006d6:	f001 fa2f 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e0:	489c      	ldr	r0, [pc, #624]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80006e2:	f001 fa29 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ec:	4899      	ldr	r0, [pc, #612]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80006ee:	f001 fa23 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f8:	4896      	ldr	r0, [pc, #600]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80006fa:	f001 fa1d 	bl	8001b38 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_Pin)==1){
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	4619      	mov	r1, r3
 8000702:	4894      	ldr	r0, [pc, #592]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000704:	f001 fa00 	bl	8001b08 <HAL_GPIO_ReadPin>
 8000708:	4603      	mov	r3, r0
 800070a:	2b01      	cmp	r3, #1
 800070c:	d10c      	bne.n	8000728 <HAL_GPIO_EXTI_Callback+0xc8>
			GPIOD->ODR |= (0xF << 12);
 800070e:	4b91      	ldr	r3, [pc, #580]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	4a90      	ldr	r2, [pc, #576]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000714:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000718:	6153      	str	r3, [r2, #20]
			keyPressed = 'C';
 800071a:	4b8f      	ldr	r3, [pc, #572]	; (8000958 <HAL_GPIO_EXTI_Callback+0x2f8>)
 800071c:	2243      	movs	r2, #67	; 0x43
 800071e:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 8000720:	2064      	movs	r0, #100	; 0x64
 8000722:	f000 ff43 	bl	80015ac <HAL_Delay>
			return;
 8000726:	e292      	b.n	8000c4e <HAL_GPIO_EXTI_Callback+0x5ee>
		}
		//
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800072e:	4889      	ldr	r0, [pc, #548]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000730:	f001 fa02 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800073a:	4886      	ldr	r0, [pc, #536]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800073c:	f001 f9fc 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8000740:	2201      	movs	r2, #1
 8000742:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000746:	4883      	ldr	r0, [pc, #524]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000748:	f001 f9f6 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000752:	4880      	ldr	r0, [pc, #512]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000754:	f001 f9f0 	bl	8001b38 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_Pin)==1){
 8000758:	88fb      	ldrh	r3, [r7, #6]
 800075a:	4619      	mov	r1, r3
 800075c:	487d      	ldr	r0, [pc, #500]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800075e:	f001 f9d3 	bl	8001b08 <HAL_GPIO_ReadPin>
 8000762:	4603      	mov	r3, r0
 8000764:	2b01      	cmp	r3, #1
 8000766:	d10c      	bne.n	8000782 <HAL_GPIO_EXTI_Callback+0x122>
			GPIOD->ODR |= (0xF << 12);
 8000768:	4b7a      	ldr	r3, [pc, #488]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	4a79      	ldr	r2, [pc, #484]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800076e:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000772:	6153      	str	r3, [r2, #20]
			keyPressed = 'B';
 8000774:	4b78      	ldr	r3, [pc, #480]	; (8000958 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8000776:	2242      	movs	r2, #66	; 0x42
 8000778:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 800077a:	2064      	movs	r0, #100	; 0x64
 800077c:	f000 ff16 	bl	80015ac <HAL_Delay>
			return;
 8000780:	e265      	b.n	8000c4e <HAL_GPIO_EXTI_Callback+0x5ee>
		}
		//
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000788:	4872      	ldr	r0, [pc, #456]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800078a:	f001 f9d5 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000794:	486f      	ldr	r0, [pc, #444]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000796:	f001 f9cf 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007a0:	486c      	ldr	r0, [pc, #432]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80007a2:	f001 f9c9 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 80007a6:	2201      	movs	r2, #1
 80007a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ac:	4869      	ldr	r0, [pc, #420]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80007ae:	f001 f9c3 	bl	8001b38 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_Pin)==1){
 80007b2:	88fb      	ldrh	r3, [r7, #6]
 80007b4:	4619      	mov	r1, r3
 80007b6:	4867      	ldr	r0, [pc, #412]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80007b8:	f001 f9a6 	bl	8001b08 <HAL_GPIO_ReadPin>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b01      	cmp	r3, #1
 80007c0:	f040 823f 	bne.w	8000c42 <HAL_GPIO_EXTI_Callback+0x5e2>
			GPIOD->ODR |= (0xF << 12);
 80007c4:	4b63      	ldr	r3, [pc, #396]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80007c6:	695b      	ldr	r3, [r3, #20]
 80007c8:	4a62      	ldr	r2, [pc, #392]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80007ca:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80007ce:	6153      	str	r3, [r2, #20]
			keyPressed = 'A';
 80007d0:	4b61      	ldr	r3, [pc, #388]	; (8000958 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80007d2:	2241      	movs	r2, #65	; 0x41
 80007d4:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 80007d6:	2064      	movs	r0, #100	; 0x64
 80007d8:	f000 fee8 	bl	80015ac <HAL_Delay>
			return;
 80007dc:	e237      	b.n	8000c4e <HAL_GPIO_EXTI_Callback+0x5ee>
		}
	}
	else if(GPIO_Pin==GPIO_PIN_9) //3,6,9,#
 80007de:	88fb      	ldrh	r3, [r7, #6]
 80007e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007e4:	f040 80ba 	bne.w	800095c <HAL_GPIO_EXTI_Callback+0x2fc>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 80007e8:	2201      	movs	r2, #1
 80007ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ee:	4859      	ldr	r0, [pc, #356]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80007f0:	f001 f9a2 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007fa:	4856      	ldr	r0, [pc, #344]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80007fc:	f001 f99c 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000806:	4853      	ldr	r0, [pc, #332]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000808:	f001 f996 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000812:	4850      	ldr	r0, [pc, #320]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000814:	f001 f990 	bl	8001b38 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_Pin)==1){
 8000818:	88fb      	ldrh	r3, [r7, #6]
 800081a:	4619      	mov	r1, r3
 800081c:	484d      	ldr	r0, [pc, #308]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800081e:	f001 f973 	bl	8001b08 <HAL_GPIO_ReadPin>
 8000822:	4603      	mov	r3, r0
 8000824:	2b01      	cmp	r3, #1
 8000826:	d10c      	bne.n	8000842 <HAL_GPIO_EXTI_Callback+0x1e2>
			GPIOD->ODR |= (0xF << 12);
 8000828:	4b4a      	ldr	r3, [pc, #296]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	4a49      	ldr	r2, [pc, #292]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800082e:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000832:	6153      	str	r3, [r2, #20]
			keyPressed = '#';
 8000834:	4b48      	ldr	r3, [pc, #288]	; (8000958 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8000836:	2223      	movs	r2, #35	; 0x23
 8000838:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 800083a:	2064      	movs	r0, #100	; 0x64
 800083c:	f000 feb6 	bl	80015ac <HAL_Delay>
			return;
 8000840:	e205      	b.n	8000c4e <HAL_GPIO_EXTI_Callback+0x5ee>
		}
		//
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000848:	4842      	ldr	r0, [pc, #264]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800084a:	f001 f975 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 800084e:	2201      	movs	r2, #1
 8000850:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000854:	483f      	ldr	r0, [pc, #252]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000856:	f001 f96f 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000860:	483c      	ldr	r0, [pc, #240]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000862:	f001 f969 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800086c:	4839      	ldr	r0, [pc, #228]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800086e:	f001 f963 	bl	8001b38 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_Pin)==1){
 8000872:	88fb      	ldrh	r3, [r7, #6]
 8000874:	4619      	mov	r1, r3
 8000876:	4837      	ldr	r0, [pc, #220]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000878:	f001 f946 	bl	8001b08 <HAL_GPIO_ReadPin>
 800087c:	4603      	mov	r3, r0
 800087e:	2b01      	cmp	r3, #1
 8000880:	d10c      	bne.n	800089c <HAL_GPIO_EXTI_Callback+0x23c>
			GPIOD->ODR |= (0xF << 12);
 8000882:	4b34      	ldr	r3, [pc, #208]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	4a33      	ldr	r2, [pc, #204]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000888:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 800088c:	6153      	str	r3, [r2, #20]
			keyPressed = '9';
 800088e:	4b32      	ldr	r3, [pc, #200]	; (8000958 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8000890:	2239      	movs	r2, #57	; 0x39
 8000892:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 8000894:	2064      	movs	r0, #100	; 0x64
 8000896:	f000 fe89 	bl	80015ac <HAL_Delay>
			return;
 800089a:	e1d8      	b.n	8000c4e <HAL_GPIO_EXTI_Callback+0x5ee>
		}
		//
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 800089c:	2200      	movs	r2, #0
 800089e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008a2:	482c      	ldr	r0, [pc, #176]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80008a4:	f001 f948 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ae:	4829      	ldr	r0, [pc, #164]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80008b0:	f001 f942 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 80008b4:	2201      	movs	r2, #1
 80008b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ba:	4826      	ldr	r0, [pc, #152]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80008bc:	f001 f93c 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008c6:	4823      	ldr	r0, [pc, #140]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80008c8:	f001 f936 	bl	8001b38 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_Pin)==1){
 80008cc:	88fb      	ldrh	r3, [r7, #6]
 80008ce:	4619      	mov	r1, r3
 80008d0:	4820      	ldr	r0, [pc, #128]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80008d2:	f001 f919 	bl	8001b08 <HAL_GPIO_ReadPin>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d10c      	bne.n	80008f6 <HAL_GPIO_EXTI_Callback+0x296>
			GPIOD->ODR |= (0xF << 12);
 80008dc:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80008de:	695b      	ldr	r3, [r3, #20]
 80008e0:	4a1c      	ldr	r2, [pc, #112]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80008e2:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80008e6:	6153      	str	r3, [r2, #20]
			keyPressed = '6';
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80008ea:	2236      	movs	r2, #54	; 0x36
 80008ec:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 80008ee:	2064      	movs	r0, #100	; 0x64
 80008f0:	f000 fe5c 	bl	80015ac <HAL_Delay>
			return;
 80008f4:	e1ab      	b.n	8000c4e <HAL_GPIO_EXTI_Callback+0x5ee>
		}
		//
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008fc:	4815      	ldr	r0, [pc, #84]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80008fe:	f001 f91b 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000908:	4812      	ldr	r0, [pc, #72]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800090a:	f001 f915 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000914:	480f      	ldr	r0, [pc, #60]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000916:	f001 f90f 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 800091a:	2201      	movs	r2, #1
 800091c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000920:	480c      	ldr	r0, [pc, #48]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000922:	f001 f909 	bl	8001b38 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_Pin)==1){
 8000926:	88fb      	ldrh	r3, [r7, #6]
 8000928:	4619      	mov	r1, r3
 800092a:	480a      	ldr	r0, [pc, #40]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800092c:	f001 f8ec 	bl	8001b08 <HAL_GPIO_ReadPin>
 8000930:	4603      	mov	r3, r0
 8000932:	2b01      	cmp	r3, #1
 8000934:	f040 8185 	bne.w	8000c42 <HAL_GPIO_EXTI_Callback+0x5e2>
			GPIOD->ODR |= (0xF << 12);
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800093a:	695b      	ldr	r3, [r3, #20]
 800093c:	4a05      	ldr	r2, [pc, #20]	; (8000954 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800093e:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000942:	6153      	str	r3, [r2, #20]
			keyPressed = '3';
 8000944:	4b04      	ldr	r3, [pc, #16]	; (8000958 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8000946:	2233      	movs	r2, #51	; 0x33
 8000948:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 800094a:	2064      	movs	r0, #100	; 0x64
 800094c:	f000 fe2e 	bl	80015ac <HAL_Delay>
			return;
 8000950:	e17d      	b.n	8000c4e <HAL_GPIO_EXTI_Callback+0x5ee>
 8000952:	bf00      	nop
 8000954:	48000c00 	.word	0x48000c00
 8000958:	20000029 	.word	0x20000029
		}
	}
	else if(GPIO_Pin==GPIO_PIN_10) //2,5,8,0
 800095c:	88fb      	ldrh	r3, [r7, #6]
 800095e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000962:	f040 80b5 	bne.w	8000ad0 <HAL_GPIO_EXTI_Callback+0x470>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 8000966:	2201      	movs	r2, #1
 8000968:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800096c:	48b9      	ldr	r0, [pc, #740]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 800096e:	f001 f8e3 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000978:	48b6      	ldr	r0, [pc, #728]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 800097a:	f001 f8dd 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000984:	48b3      	ldr	r0, [pc, #716]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000986:	f001 f8d7 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000990:	48b0      	ldr	r0, [pc, #704]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000992:	f001 f8d1 	bl	8001b38 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_Pin)==1){
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	4619      	mov	r1, r3
 800099a:	48ae      	ldr	r0, [pc, #696]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 800099c:	f001 f8b4 	bl	8001b08 <HAL_GPIO_ReadPin>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d10c      	bne.n	80009c0 <HAL_GPIO_EXTI_Callback+0x360>
			GPIOD->ODR |= (0xF << 12);
 80009a6:	4bab      	ldr	r3, [pc, #684]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	4aaa      	ldr	r2, [pc, #680]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 80009ac:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80009b0:	6153      	str	r3, [r2, #20]
			keyPressed = '0';
 80009b2:	4ba9      	ldr	r3, [pc, #676]	; (8000c58 <HAL_GPIO_EXTI_Callback+0x5f8>)
 80009b4:	2230      	movs	r2, #48	; 0x30
 80009b6:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 80009b8:	2064      	movs	r0, #100	; 0x64
 80009ba:	f000 fdf7 	bl	80015ac <HAL_Delay>
			return;
 80009be:	e146      	b.n	8000c4e <HAL_GPIO_EXTI_Callback+0x5ee>
		}
		//
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 80009c0:	2200      	movs	r2, #0
 80009c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009c6:	48a3      	ldr	r0, [pc, #652]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 80009c8:	f001 f8b6 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 80009cc:	2201      	movs	r2, #1
 80009ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d2:	48a0      	ldr	r0, [pc, #640]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 80009d4:	f001 f8b0 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009de:	489d      	ldr	r0, [pc, #628]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 80009e0:	f001 f8aa 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009ea:	489a      	ldr	r0, [pc, #616]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 80009ec:	f001 f8a4 	bl	8001b38 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_Pin)==1){
 80009f0:	88fb      	ldrh	r3, [r7, #6]
 80009f2:	4619      	mov	r1, r3
 80009f4:	4897      	ldr	r0, [pc, #604]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 80009f6:	f001 f887 	bl	8001b08 <HAL_GPIO_ReadPin>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d10c      	bne.n	8000a1a <HAL_GPIO_EXTI_Callback+0x3ba>
			GPIOD->ODR |= (0xF << 12);
 8000a00:	4b94      	ldr	r3, [pc, #592]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000a02:	695b      	ldr	r3, [r3, #20]
 8000a04:	4a93      	ldr	r2, [pc, #588]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000a06:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000a0a:	6153      	str	r3, [r2, #20]
			keyPressed = '8';
 8000a0c:	4b92      	ldr	r3, [pc, #584]	; (8000c58 <HAL_GPIO_EXTI_Callback+0x5f8>)
 8000a0e:	2238      	movs	r2, #56	; 0x38
 8000a10:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 8000a12:	2064      	movs	r0, #100	; 0x64
 8000a14:	f000 fdca 	bl	80015ac <HAL_Delay>
			return;
 8000a18:	e119      	b.n	8000c4e <HAL_GPIO_EXTI_Callback+0x5ee>
		}
		//
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a20:	488c      	ldr	r0, [pc, #560]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000a22:	f001 f889 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a2c:	4889      	ldr	r0, [pc, #548]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000a2e:	f001 f883 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8000a32:	2201      	movs	r2, #1
 8000a34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a38:	4886      	ldr	r0, [pc, #536]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000a3a:	f001 f87d 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a44:	4883      	ldr	r0, [pc, #524]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000a46:	f001 f877 	bl	8001b38 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_Pin)==1){
 8000a4a:	88fb      	ldrh	r3, [r7, #6]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4881      	ldr	r0, [pc, #516]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000a50:	f001 f85a 	bl	8001b08 <HAL_GPIO_ReadPin>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d10c      	bne.n	8000a74 <HAL_GPIO_EXTI_Callback+0x414>
			GPIOD->ODR |= (0xF << 12);
 8000a5a:	4b7e      	ldr	r3, [pc, #504]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000a5c:	695b      	ldr	r3, [r3, #20]
 8000a5e:	4a7d      	ldr	r2, [pc, #500]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000a60:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000a64:	6153      	str	r3, [r2, #20]
			keyPressed = '5';
 8000a66:	4b7c      	ldr	r3, [pc, #496]	; (8000c58 <HAL_GPIO_EXTI_Callback+0x5f8>)
 8000a68:	2235      	movs	r2, #53	; 0x35
 8000a6a:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 8000a6c:	2064      	movs	r0, #100	; 0x64
 8000a6e:	f000 fd9d 	bl	80015ac <HAL_Delay>
			return;
 8000a72:	e0ec      	b.n	8000c4e <HAL_GPIO_EXTI_Callback+0x5ee>
		}
		//
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a7a:	4876      	ldr	r0, [pc, #472]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000a7c:	f001 f85c 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a86:	4873      	ldr	r0, [pc, #460]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000a88:	f001 f856 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a92:	4870      	ldr	r0, [pc, #448]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000a94:	f001 f850 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a9e:	486d      	ldr	r0, [pc, #436]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000aa0:	f001 f84a 	bl	8001b38 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_Pin)==1){
 8000aa4:	88fb      	ldrh	r3, [r7, #6]
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	486a      	ldr	r0, [pc, #424]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000aaa:	f001 f82d 	bl	8001b08 <HAL_GPIO_ReadPin>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	f040 80c6 	bne.w	8000c42 <HAL_GPIO_EXTI_Callback+0x5e2>
			GPIOD->ODR |= (0xF << 12);
 8000ab6:	4b67      	ldr	r3, [pc, #412]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	4a66      	ldr	r2, [pc, #408]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000abc:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000ac0:	6153      	str	r3, [r2, #20]
			keyPressed = '2';
 8000ac2:	4b65      	ldr	r3, [pc, #404]	; (8000c58 <HAL_GPIO_EXTI_Callback+0x5f8>)
 8000ac4:	2232      	movs	r2, #50	; 0x32
 8000ac6:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 8000ac8:	2064      	movs	r0, #100	; 0x64
 8000aca:	f000 fd6f 	bl	80015ac <HAL_Delay>
			return;
 8000ace:	e0be      	b.n	8000c4e <HAL_GPIO_EXTI_Callback+0x5ee>
		}
	}
	else if(GPIO_Pin==GPIO_PIN_11) //1,4,7,*
 8000ad0:	88fb      	ldrh	r3, [r7, #6]
 8000ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ad6:	f040 80b4 	bne.w	8000c42 <HAL_GPIO_EXTI_Callback+0x5e2>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 8000ada:	2201      	movs	r2, #1
 8000adc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ae0:	485c      	ldr	r0, [pc, #368]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000ae2:	f001 f829 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aec:	4859      	ldr	r0, [pc, #356]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000aee:	f001 f823 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000af8:	4856      	ldr	r0, [pc, #344]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000afa:	f001 f81d 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b04:	4853      	ldr	r0, [pc, #332]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000b06:	f001 f817 	bl	8001b38 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_Pin)==1){
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4851      	ldr	r0, [pc, #324]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000b10:	f000 fffa 	bl	8001b08 <HAL_GPIO_ReadPin>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d10c      	bne.n	8000b34 <HAL_GPIO_EXTI_Callback+0x4d4>
			GPIOD->ODR |= (0xF << 12);
 8000b1a:	4b4e      	ldr	r3, [pc, #312]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000b1c:	695b      	ldr	r3, [r3, #20]
 8000b1e:	4a4d      	ldr	r2, [pc, #308]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000b20:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000b24:	6153      	str	r3, [r2, #20]
			keyPressed = '*';
 8000b26:	4b4c      	ldr	r3, [pc, #304]	; (8000c58 <HAL_GPIO_EXTI_Callback+0x5f8>)
 8000b28:	222a      	movs	r2, #42	; 0x2a
 8000b2a:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 8000b2c:	2064      	movs	r0, #100	; 0x64
 8000b2e:	f000 fd3d 	bl	80015ac <HAL_Delay>
			return;
 8000b32:	e08c      	b.n	8000c4e <HAL_GPIO_EXTI_Callback+0x5ee>
		}
		//
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000b34:	2200      	movs	r2, #0
 8000b36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b3a:	4846      	ldr	r0, [pc, #280]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000b3c:	f000 fffc 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000b40:	2201      	movs	r2, #1
 8000b42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b46:	4843      	ldr	r0, [pc, #268]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000b48:	f000 fff6 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b52:	4840      	ldr	r0, [pc, #256]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000b54:	f000 fff0 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b5e:	483d      	ldr	r0, [pc, #244]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000b60:	f000 ffea 	bl	8001b38 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_Pin)==1){
 8000b64:	88fb      	ldrh	r3, [r7, #6]
 8000b66:	4619      	mov	r1, r3
 8000b68:	483a      	ldr	r0, [pc, #232]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000b6a:	f000 ffcd 	bl	8001b08 <HAL_GPIO_ReadPin>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d10c      	bne.n	8000b8e <HAL_GPIO_EXTI_Callback+0x52e>
			GPIOD->ODR |= (0xF << 12);
 8000b74:	4b37      	ldr	r3, [pc, #220]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000b76:	695b      	ldr	r3, [r3, #20]
 8000b78:	4a36      	ldr	r2, [pc, #216]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000b7a:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000b7e:	6153      	str	r3, [r2, #20]
			keyPressed = '7';
 8000b80:	4b35      	ldr	r3, [pc, #212]	; (8000c58 <HAL_GPIO_EXTI_Callback+0x5f8>)
 8000b82:	2237      	movs	r2, #55	; 0x37
 8000b84:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 8000b86:	2064      	movs	r0, #100	; 0x64
 8000b88:	f000 fd10 	bl	80015ac <HAL_Delay>
			return;
 8000b8c:	e05f      	b.n	8000c4e <HAL_GPIO_EXTI_Callback+0x5ee>
		}
		//
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b94:	482f      	ldr	r0, [pc, #188]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000b96:	f000 ffcf 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba0:	482c      	ldr	r0, [pc, #176]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000ba2:	f000 ffc9 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bac:	4829      	ldr	r0, [pc, #164]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000bae:	f000 ffc3 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bb8:	4826      	ldr	r0, [pc, #152]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000bba:	f000 ffbd 	bl	8001b38 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_Pin)==1){
 8000bbe:	88fb      	ldrh	r3, [r7, #6]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4824      	ldr	r0, [pc, #144]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000bc4:	f000 ffa0 	bl	8001b08 <HAL_GPIO_ReadPin>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d10c      	bne.n	8000be8 <HAL_GPIO_EXTI_Callback+0x588>
			GPIOD->ODR |= (0xF << 12);
 8000bce:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	4a20      	ldr	r2, [pc, #128]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000bd4:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000bd8:	6153      	str	r3, [r2, #20]
			keyPressed = '4';
 8000bda:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <HAL_GPIO_EXTI_Callback+0x5f8>)
 8000bdc:	2234      	movs	r2, #52	; 0x34
 8000bde:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 8000be0:	2064      	movs	r0, #100	; 0x64
 8000be2:	f000 fce3 	bl	80015ac <HAL_Delay>
			return;
 8000be6:	e032      	b.n	8000c4e <HAL_GPIO_EXTI_Callback+0x5ee>
		}
		//
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bee:	4819      	ldr	r0, [pc, #100]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000bf0:	f000 ffa2 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bfa:	4816      	ldr	r0, [pc, #88]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000bfc:	f000 ff9c 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000c00:	2200      	movs	r2, #0
 8000c02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c06:	4813      	ldr	r0, [pc, #76]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000c08:	f000 ff96 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c12:	4810      	ldr	r0, [pc, #64]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000c14:	f000 ff90 	bl	8001b38 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_Pin)==1){
 8000c18:	88fb      	ldrh	r3, [r7, #6]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	480d      	ldr	r0, [pc, #52]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000c1e:	f000 ff73 	bl	8001b08 <HAL_GPIO_ReadPin>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d10c      	bne.n	8000c42 <HAL_GPIO_EXTI_Callback+0x5e2>
			GPIOD->ODR |= (0xF << 12);
 8000c28:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000c2a:	695b      	ldr	r3, [r3, #20]
 8000c2c:	4a09      	ldr	r2, [pc, #36]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000c2e:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000c32:	6153      	str	r3, [r2, #20]
			keyPressed = '1';
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <HAL_GPIO_EXTI_Callback+0x5f8>)
 8000c36:	2231      	movs	r2, #49	; 0x31
 8000c38:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 8000c3a:	2064      	movs	r0, #100	; 0x64
 8000c3c:	f000 fcb6 	bl	80015ac <HAL_Delay>
			return;
 8000c40:	e005      	b.n	8000c4e <HAL_GPIO_EXTI_Callback+0x5ee>
		}
	}
	GPIOD->ODR |= (0xF << 12);
 8000c42:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	4a03      	ldr	r2, [pc, #12]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000c48:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000c4c:	6153      	str	r3, [r2, #20]
}
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	48000c00 	.word	0x48000c00
 8000c58:	20000029 	.word	0x20000029

08000c5c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
  if(keyPressed == '2' && dy!=1)
 8000c64:	4b7c      	ldr	r3, [pc, #496]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b32      	cmp	r3, #50	; 0x32
 8000c6a:	d11f      	bne.n	8000cac <HAL_TIM_PeriodElapsedCallback+0x50>
 8000c6c:	4b7b      	ldr	r3, [pc, #492]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000c6e:	f993 3000 	ldrsb.w	r3, [r3]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d01a      	beq.n	8000cac <HAL_TIM_PeriodElapsedCallback+0x50>
  {
	  dx = 0, dy = -1;
 8000c76:	4b7a      	ldr	r3, [pc, #488]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
 8000c7c:	4b77      	ldr	r3, [pc, #476]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000c7e:	22ff      	movs	r2, #255	; 0xff
 8000c80:	701a      	strb	r2, [r3, #0]
	  grid[hx][hy] = UP;
 8000c82:	4b78      	ldr	r3, [pc, #480]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000c84:	f993 3000 	ldrsb.w	r3, [r3]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4b77      	ldr	r3, [pc, #476]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000c8c:	f993 3000 	ldrsb.w	r3, [r3]
 8000c90:	4618      	mov	r0, r3
 8000c92:	4a76      	ldr	r2, [pc, #472]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000c94:	460b      	mov	r3, r1
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	440b      	add	r3, r1
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	4413      	add	r3, r2
 8000c9e:	4403      	add	r3, r0
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	701a      	strb	r2, [r3, #0]
	  keyPressed = 0;	//clean the key flag so it wouldn't be registered twice during the next iteration
 8000ca4:	4b6c      	ldr	r3, [pc, #432]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
 8000caa:	e06c      	b.n	8000d86 <HAL_TIM_PeriodElapsedCallback+0x12a>
  }
  else if(keyPressed == '4' && dx!=1)
 8000cac:	4b6a      	ldr	r3, [pc, #424]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b34      	cmp	r3, #52	; 0x34
 8000cb2:	d11f      	bne.n	8000cf4 <HAL_TIM_PeriodElapsedCallback+0x98>
 8000cb4:	4b6a      	ldr	r3, [pc, #424]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000cb6:	f993 3000 	ldrsb.w	r3, [r3]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d01a      	beq.n	8000cf4 <HAL_TIM_PeriodElapsedCallback+0x98>
  {
	  dx = -1, dy = 0;
 8000cbe:	4b68      	ldr	r3, [pc, #416]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000cc0:	22ff      	movs	r2, #255	; 0xff
 8000cc2:	701a      	strb	r2, [r3, #0]
 8000cc4:	4b65      	ldr	r3, [pc, #404]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
	  grid[hx][hy] = LEFT;
 8000cca:	4b66      	ldr	r3, [pc, #408]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000ccc:	f993 3000 	ldrsb.w	r3, [r3]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4b65      	ldr	r3, [pc, #404]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000cd4:	f993 3000 	ldrsb.w	r3, [r3]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	4a64      	ldr	r2, [pc, #400]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000cdc:	460b      	mov	r3, r1
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	440b      	add	r3, r1
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	4403      	add	r3, r0
 8000ce8:	2202      	movs	r2, #2
 8000cea:	701a      	strb	r2, [r3, #0]
	  keyPressed = 0;
 8000cec:	4b5a      	ldr	r3, [pc, #360]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
 8000cf2:	e048      	b.n	8000d86 <HAL_TIM_PeriodElapsedCallback+0x12a>
  }
  else if(keyPressed == '6' && dx!=-1)
 8000cf4:	4b58      	ldr	r3, [pc, #352]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b36      	cmp	r3, #54	; 0x36
 8000cfa:	d120      	bne.n	8000d3e <HAL_TIM_PeriodElapsedCallback+0xe2>
 8000cfc:	4b58      	ldr	r3, [pc, #352]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000cfe:	f993 3000 	ldrsb.w	r3, [r3]
 8000d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d06:	d01a      	beq.n	8000d3e <HAL_TIM_PeriodElapsedCallback+0xe2>
  {
	  dx = 1, dy = 0;
 8000d08:	4b55      	ldr	r3, [pc, #340]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	701a      	strb	r2, [r3, #0]
 8000d0e:	4b53      	ldr	r3, [pc, #332]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
	  grid[hx][hy] = RIGHT;
 8000d14:	4b53      	ldr	r3, [pc, #332]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000d16:	f993 3000 	ldrsb.w	r3, [r3]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4b52      	ldr	r3, [pc, #328]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000d1e:	f993 3000 	ldrsb.w	r3, [r3]
 8000d22:	4618      	mov	r0, r3
 8000d24:	4a51      	ldr	r2, [pc, #324]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000d26:	460b      	mov	r3, r1
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	440b      	add	r3, r1
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	4413      	add	r3, r2
 8000d30:	4403      	add	r3, r0
 8000d32:	2203      	movs	r2, #3
 8000d34:	701a      	strb	r2, [r3, #0]
	  keyPressed = 0;
 8000d36:	4b48      	ldr	r3, [pc, #288]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
 8000d3c:	e023      	b.n	8000d86 <HAL_TIM_PeriodElapsedCallback+0x12a>
  }
  else if(keyPressed == '8' && dy!=-1)
 8000d3e:	4b46      	ldr	r3, [pc, #280]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b38      	cmp	r3, #56	; 0x38
 8000d44:	d11f      	bne.n	8000d86 <HAL_TIM_PeriodElapsedCallback+0x12a>
 8000d46:	4b45      	ldr	r3, [pc, #276]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000d48:	f993 3000 	ldrsb.w	r3, [r3]
 8000d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d50:	d019      	beq.n	8000d86 <HAL_TIM_PeriodElapsedCallback+0x12a>
  {
	  dx = 0, dy = 1;
 8000d52:	4b43      	ldr	r3, [pc, #268]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]
 8000d58:	4b40      	ldr	r3, [pc, #256]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	701a      	strb	r2, [r3, #0]
	  grid[hx][hy] = DOWN;
 8000d5e:	4b41      	ldr	r3, [pc, #260]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000d60:	f993 3000 	ldrsb.w	r3, [r3]
 8000d64:	4619      	mov	r1, r3
 8000d66:	4b40      	ldr	r3, [pc, #256]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000d68:	f993 3000 	ldrsb.w	r3, [r3]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	4a3f      	ldr	r2, [pc, #252]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000d70:	460b      	mov	r3, r1
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	440b      	add	r3, r1
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	4413      	add	r3, r2
 8000d7a:	4403      	add	r3, r0
 8000d7c:	2204      	movs	r2, #4
 8000d7e:	701a      	strb	r2, [r3, #0]
	  keyPressed = 0;
 8000d80:	4b35      	ldr	r3, [pc, #212]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
  }


  if( checkSnakeCrash() )
 8000d86:	f7ff faab 	bl	80002e0 <checkSnakeCrash>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d002      	beq.n	8000d96 <HAL_TIM_PeriodElapsedCallback+0x13a>
	  loseDialog();
 8000d90:	f7ff fc50 	bl	8000634 <loseDialog>
		  foodflag = 1;
	  }

	  updateLCD();	//finally, show the results on LCD
  }
}
 8000d94:	e0f4      	b.n	8000f80 <HAL_TIM_PeriodElapsedCallback+0x324>
	  uint8_t temp = grid[tx][ty];
 8000d96:	4b36      	ldr	r3, [pc, #216]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4b35      	ldr	r3, [pc, #212]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4618      	mov	r0, r3
 8000da2:	4a32      	ldr	r2, [pc, #200]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000da4:	460b      	mov	r3, r1
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	440b      	add	r3, r1
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4413      	add	r3, r2
 8000dae:	4403      	add	r3, r0
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	73fb      	strb	r3, [r7, #15]
	  if(grid[hx+dx][hy+dy] != FOOD) {
 8000db4:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000db6:	f993 3000 	ldrsb.w	r3, [r3]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000dbe:	f993 3000 	ldrsb.w	r3, [r3]
 8000dc2:	441a      	add	r2, r3
 8000dc4:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000dc6:	f993 3000 	ldrsb.w	r3, [r3]
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000dce:	f993 3000 	ldrsb.w	r3, [r3]
 8000dd2:	4419      	add	r1, r3
 8000dd4:	4825      	ldr	r0, [pc, #148]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	4413      	add	r3, r2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	4403      	add	r3, r0
 8000de0:	440b      	add	r3, r1
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b05      	cmp	r3, #5
 8000de6:	d047      	beq.n	8000e78 <HAL_TIM_PeriodElapsedCallback+0x21c>
		  grid[tx][ty] = 0;
 8000de8:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	4a1d      	ldr	r2, [pc, #116]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000df6:	460b      	mov	r3, r1
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	440b      	add	r3, r1
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	4403      	add	r3, r0
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]
		  if(temp==UP)
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d106      	bne.n	8000e1a <HAL_TIM_PeriodElapsedCallback+0x1be>
			  ty--;
 8000e0c:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	3b01      	subs	r3, #1
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000e16:	701a      	strb	r2, [r3, #0]
 8000e18:	e031      	b.n	8000e7e <HAL_TIM_PeriodElapsedCallback+0x222>
		  else if(temp==LEFT)
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d106      	bne.n	8000e2e <HAL_TIM_PeriodElapsedCallback+0x1d2>
			  tx--;
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000e2a:	701a      	strb	r2, [r3, #0]
 8000e2c:	e027      	b.n	8000e7e <HAL_TIM_PeriodElapsedCallback+0x222>
		  else if(temp==RIGHT)
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	2b03      	cmp	r3, #3
 8000e32:	d106      	bne.n	8000e42 <HAL_TIM_PeriodElapsedCallback+0x1e6>
			  tx++;
 8000e34:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000e3e:	701a      	strb	r2, [r3, #0]
 8000e40:	e01d      	b.n	8000e7e <HAL_TIM_PeriodElapsedCallback+0x222>
		  else if(temp==DOWN)
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	2b04      	cmp	r3, #4
 8000e46:	d11a      	bne.n	8000e7e <HAL_TIM_PeriodElapsedCallback+0x222>
			  ty++;
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000e52:	701a      	strb	r2, [r3, #0]
 8000e54:	e013      	b.n	8000e7e <HAL_TIM_PeriodElapsedCallback+0x222>
 8000e56:	bf00      	nop
 8000e58:	20000029 	.word	0x20000029
 8000e5c:	200001e4 	.word	0x200001e4
 8000e60:	20000195 	.word	0x20000195
 8000e64:	200001e6 	.word	0x200001e6
 8000e68:	20000030 	.word	0x20000030
 8000e6c:	20000034 	.word	0x20000034
 8000e70:	20000194 	.word	0x20000194
 8000e74:	200001e5 	.word	0x200001e5
		  foodflag = 0;
 8000e78:	4b43      	ldr	r3, [pc, #268]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	701a      	strb	r2, [r3, #0]
	  temp = grid[hx][hy];
 8000e7e:	4b43      	ldr	r3, [pc, #268]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000e80:	f993 3000 	ldrsb.w	r3, [r3]
 8000e84:	4619      	mov	r1, r3
 8000e86:	4b42      	ldr	r3, [pc, #264]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000e88:	f993 3000 	ldrsb.w	r3, [r3]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	4a41      	ldr	r2, [pc, #260]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000e90:	460b      	mov	r3, r1
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	440b      	add	r3, r1
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	4413      	add	r3, r2
 8000e9a:	4403      	add	r3, r0
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	73fb      	strb	r3, [r7, #15]
	  hx += dx;
 8000ea0:	4b3a      	ldr	r3, [pc, #232]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000ea2:	f993 3000 	ldrsb.w	r3, [r3]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	4b3b      	ldr	r3, [pc, #236]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000eaa:	f993 3000 	ldrsb.w	r3, [r3]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	4413      	add	r3, r2
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	b25a      	sxtb	r2, r3
 8000eb6:	4b35      	ldr	r3, [pc, #212]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000eb8:	701a      	strb	r2, [r3, #0]
	  hy += dy;
 8000eba:	4b35      	ldr	r3, [pc, #212]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000ebc:	f993 3000 	ldrsb.w	r3, [r3]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b36      	ldr	r3, [pc, #216]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000ec4:	f993 3000 	ldrsb.w	r3, [r3]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	4413      	add	r3, r2
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	b25a      	sxtb	r2, r3
 8000ed0:	4b2f      	ldr	r3, [pc, #188]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000ed2:	701a      	strb	r2, [r3, #0]
	  grid[hx][hy] = temp;
 8000ed4:	4b2d      	ldr	r3, [pc, #180]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000ed6:	f993 3000 	ldrsb.w	r3, [r3]
 8000eda:	4619      	mov	r1, r3
 8000edc:	4b2c      	ldr	r3, [pc, #176]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000ede:	f993 3000 	ldrsb.w	r3, [r3]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	4a2b      	ldr	r2, [pc, #172]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	440b      	add	r3, r1
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	4413      	add	r3, r2
 8000ef0:	4403      	add	r3, r0
 8000ef2:	7bfa      	ldrb	r2, [r7, #15]
 8000ef4:	701a      	strb	r2, [r3, #0]
	  if(!foodflag)
 8000ef6:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	f083 0301 	eor.w	r3, r3, #1
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d03b      	beq.n	8000f7c <HAL_TIM_PeriodElapsedCallback+0x320>
			  foodx = lfsrrand() % 21;
 8000f04:	f7ff f960 	bl	80001c8 <lfsrrand>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8000f0e:	fba3 2301 	umull	r2, r3, r3, r1
 8000f12:	1aca      	subs	r2, r1, r3
 8000f14:	0852      	lsrs	r2, r2, #1
 8000f16:	4413      	add	r3, r2
 8000f18:	091a      	lsrs	r2, r3, #4
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	4413      	add	r3, r2
 8000f20:	00da      	lsls	r2, r3, #3
 8000f22:	1ad2      	subs	r2, r2, r3
 8000f24:	1a8b      	subs	r3, r1, r2
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	73bb      	strb	r3, [r7, #14]
			  foody = lfsrrand() % 12;
 8000f2a:	f7ff f94d 	bl	80001c8 <lfsrrand>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000f34:	fba3 1302 	umull	r1, r3, r3, r2
 8000f38:	08d9      	lsrs	r1, r3, #3
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	440b      	add	r3, r1
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	737b      	strb	r3, [r7, #13]
		  while(grid[foodx][foody] != 0);
 8000f48:	7bba      	ldrb	r2, [r7, #14]
 8000f4a:	7b79      	ldrb	r1, [r7, #13]
 8000f4c:	4811      	ldr	r0, [pc, #68]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000f4e:	4613      	mov	r3, r2
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	4413      	add	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4403      	add	r3, r0
 8000f58:	440b      	add	r3, r1
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1d1      	bne.n	8000f04 <HAL_TIM_PeriodElapsedCallback+0x2a8>
		  grid[foodx][foody] = FOOD;
 8000f60:	7bba      	ldrb	r2, [r7, #14]
 8000f62:	7b79      	ldrb	r1, [r7, #13]
 8000f64:	480b      	ldr	r0, [pc, #44]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000f66:	4613      	mov	r3, r2
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	4413      	add	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4403      	add	r3, r0
 8000f70:	440b      	add	r3, r1
 8000f72:	2205      	movs	r2, #5
 8000f74:	701a      	strb	r2, [r3, #0]
		  foodflag = 1;
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
	  updateLCD();	//finally, show the results on LCD
 8000f7c:	f7ff fa24 	bl	80003c8 <updateLCD>
}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000028 	.word	0x20000028
 8000f8c:	200001e6 	.word	0x200001e6
 8000f90:	20000030 	.word	0x20000030
 8000f94:	20000034 	.word	0x20000034
 8000f98:	20000195 	.word	0x20000195
 8000f9c:	200001e4 	.word	0x200001e4
 8000fa0:	86186187 	.word	0x86186187
 8000fa4:	aaaaaaab 	.word	0xaaaaaaab

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fac:	f000 fa98 	bl	80014e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb0:	f000 f812 	bl	8000fd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb4:	f000 f8f4 	bl	80011a0 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000fb8:	f000 f860 	bl	800107c <MX_SPI3_Init>
  MX_TIM1_Init();
 8000fbc:	f000 f89c 	bl	80010f8 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim1);
 8000fc0:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <main+0x2c>)
 8000fc2:	f002 fc5d 	bl	8003880 <HAL_TIM_Base_Start_IT>
  PCD8544_Init(0x38);
 8000fc6:	2038      	movs	r0, #56	; 0x38
 8000fc8:	f003 f8e4 	bl	8004194 <PCD8544_Init>
  newGameStart();
 8000fcc:	f7ff f928 	bl	8000220 <newGameStart>
  //PCD8544_Puts("Hello World!", PCD8544_Pixel_Set, PCD8544_FontSize_5x7);
  //PCD8544_Refresh();
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <main+0x28>
 8000fd2:	bf00      	nop
 8000fd4:	20000198 	.word	0x20000198

08000fd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b09e      	sub	sp, #120	; 0x78
 8000fdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fde:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fe2:	2228      	movs	r2, #40	; 0x28
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f003 fc4e 	bl	8004888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	223c      	movs	r2, #60	; 0x3c
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f003 fc40 	bl	8004888 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001008:	2302      	movs	r3, #2
 800100a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800100c:	2301      	movs	r3, #1
 800100e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001010:	2310      	movs	r3, #16
 8001012:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001014:	2300      	movs	r3, #0
 8001016:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001018:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800101c:	4618      	mov	r0, r3
 800101e:	f000 fdbb 	bl	8001b98 <HAL_RCC_OscConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001028:	f000 f940 	bl	80012ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102c:	230f      	movs	r3, #15
 800102e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001030:	2300      	movs	r3, #0
 8001032:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001040:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f001 fcae 	bl	80029a8 <HAL_RCC_ClockConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001052:	f000 f92b 	bl	80012ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800105c:	2300      	movs	r3, #0
 800105e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001060:	463b      	mov	r3, r7
 8001062:	4618      	mov	r0, r3
 8001064:	f001 fe86 	bl	8002d74 <HAL_RCCEx_PeriphCLKConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800106e:	f000 f91d 	bl	80012ac <Error_Handler>
  }
}
 8001072:	bf00      	nop
 8001074:	3778      	adds	r7, #120	; 0x78
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001080:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <MX_SPI3_Init+0x74>)
 8001082:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <MX_SPI3_Init+0x78>)
 8001084:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001086:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <MX_SPI3_Init+0x74>)
 8001088:	f44f 7282 	mov.w	r2, #260	; 0x104
 800108c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800108e:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <MX_SPI3_Init+0x74>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001094:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <MX_SPI3_Init+0x74>)
 8001096:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800109a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800109c:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <MX_SPI3_Init+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010a2:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <MX_SPI3_Init+0x74>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <MX_SPI3_Init+0x74>)
 80010aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ae:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MX_SPI3_Init+0x74>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <MX_SPI3_Init+0x74>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MX_SPI3_Init+0x74>)
 80010be:	2200      	movs	r2, #0
 80010c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <MX_SPI3_Init+0x74>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_SPI3_Init+0x74>)
 80010ca:	2207      	movs	r2, #7
 80010cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <MX_SPI3_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <MX_SPI3_Init+0x74>)
 80010d6:	2208      	movs	r2, #8
 80010d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_SPI3_Init+0x74>)
 80010dc:	f001 fffa 	bl	80030d4 <HAL_SPI_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80010e6:	f000 f8e1 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000130 	.word	0x20000130
 80010f4:	40003c00 	.word	0x40003c00

080010f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001116:	4b20      	ldr	r3, [pc, #128]	; (8001198 <MX_TIM1_Init+0xa0>)
 8001118:	4a20      	ldr	r2, [pc, #128]	; (800119c <MX_TIM1_Init+0xa4>)
 800111a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 800111c:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <MX_TIM1_Init+0xa0>)
 800111e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001122:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <MX_TIM1_Init+0xa0>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5999;
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <MX_TIM1_Init+0xa0>)
 800112c:	f241 726f 	movw	r2, #5999	; 0x176f
 8001130:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <MX_TIM1_Init+0xa0>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <MX_TIM1_Init+0xa0>)
 800113a:	2200      	movs	r2, #0
 800113c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_TIM1_Init+0xa0>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001144:	4814      	ldr	r0, [pc, #80]	; (8001198 <MX_TIM1_Init+0xa0>)
 8001146:	f002 fb43 	bl	80037d0 <HAL_TIM_Base_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001150:	f000 f8ac 	bl	80012ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001158:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800115a:	f107 0310 	add.w	r3, r7, #16
 800115e:	4619      	mov	r1, r3
 8001160:	480d      	ldr	r0, [pc, #52]	; (8001198 <MX_TIM1_Init+0xa0>)
 8001162:	f002 fd45 	bl	8003bf0 <HAL_TIM_ConfigClockSource>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800116c:	f000 f89e 	bl	80012ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_TIM1_Init+0xa0>)
 8001182:	f002 ff45 	bl	8004010 <HAL_TIMEx_MasterConfigSynchronization>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800118c:	f000 f88e 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3720      	adds	r7, #32
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000198 	.word	0x20000198
 800119c:	40012c00 	.word	0x40012c00

080011a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a6:	f107 030c 	add.w	r3, r7, #12
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011b6:	4b3a      	ldr	r3, [pc, #232]	; (80012a0 <MX_GPIO_Init+0x100>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	4a39      	ldr	r2, [pc, #228]	; (80012a0 <MX_GPIO_Init+0x100>)
 80011bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011c0:	6153      	str	r3, [r2, #20]
 80011c2:	4b37      	ldr	r3, [pc, #220]	; (80012a0 <MX_GPIO_Init+0x100>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ce:	4b34      	ldr	r3, [pc, #208]	; (80012a0 <MX_GPIO_Init+0x100>)
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	4a33      	ldr	r2, [pc, #204]	; (80012a0 <MX_GPIO_Init+0x100>)
 80011d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011d8:	6153      	str	r3, [r2, #20]
 80011da:	4b31      	ldr	r3, [pc, #196]	; (80012a0 <MX_GPIO_Init+0x100>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e6:	4b2e      	ldr	r3, [pc, #184]	; (80012a0 <MX_GPIO_Init+0x100>)
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	4a2d      	ldr	r2, [pc, #180]	; (80012a0 <MX_GPIO_Init+0x100>)
 80011ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011f0:	6153      	str	r3, [r2, #20]
 80011f2:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <MX_GPIO_Init+0x100>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001204:	4827      	ldr	r0, [pc, #156]	; (80012a4 <MX_GPIO_Init+0x104>)
 8001206:	f000 fc97 	bl	8001b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 800120a:	2201      	movs	r2, #1
 800120c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001210:	4825      	ldr	r0, [pc, #148]	; (80012a8 <MX_GPIO_Init+0x108>)
 8001212:	f000 fc91 	bl	8001b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	21a8      	movs	r1, #168	; 0xa8
 800121a:	4823      	ldr	r0, [pc, #140]	; (80012a8 <MX_GPIO_Init+0x108>)
 800121c:	f000 fc8c 	bl	8001b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE8 PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001220:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001224:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001226:	2301      	movs	r3, #1
 8001228:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001232:	f107 030c 	add.w	r3, r7, #12
 8001236:	4619      	mov	r1, r3
 8001238:	481a      	ldr	r0, [pc, #104]	; (80012a4 <MX_GPIO_Init+0x104>)
 800123a:	f000 faeb 	bl	8001814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800123e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001242:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001244:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001248:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800124a:	2302      	movs	r3, #2
 800124c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124e:	f107 030c 	add.w	r3, r7, #12
 8001252:	4619      	mov	r1, r3
 8001254:	4814      	ldr	r0, [pc, #80]	; (80012a8 <MX_GPIO_Init+0x108>)
 8001256:	f000 fadd 	bl	8001814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD3 PD5 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800125a:	f24f 03a8 	movw	r3, #61608	; 0xf0a8
 800125e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001260:	2301      	movs	r3, #1
 8001262:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	4619      	mov	r1, r3
 8001272:	480d      	ldr	r0, [pc, #52]	; (80012a8 <MX_GPIO_Init+0x108>)
 8001274:	f000 face 	bl	8001814 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	2101      	movs	r1, #1
 800127c:	2017      	movs	r0, #23
 800127e:	f000 fa92 	bl	80017a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001282:	2017      	movs	r0, #23
 8001284:	f000 faab 	bl	80017de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	2101      	movs	r1, #1
 800128c:	2028      	movs	r0, #40	; 0x28
 800128e:	f000 fa8a 	bl	80017a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001292:	2028      	movs	r0, #40	; 0x28
 8001294:	f000 faa3 	bl	80017de <HAL_NVIC_EnableIRQ>

}
 8001298:	bf00      	nop
 800129a:	3720      	adds	r7, #32
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40021000 	.word	0x40021000
 80012a4:	48001000 	.word	0x48001000
 80012a8:	48000c00 	.word	0x48000c00

080012ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <Error_Handler+0x6>

080012b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <HAL_MspInit+0x44>)
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	4a0e      	ldr	r2, [pc, #56]	; (80012f8 <HAL_MspInit+0x44>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6193      	str	r3, [r2, #24]
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <HAL_MspInit+0x44>)
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <HAL_MspInit+0x44>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	4a08      	ldr	r2, [pc, #32]	; (80012f8 <HAL_MspInit+0x44>)
 80012d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012dc:	61d3      	str	r3, [r2, #28]
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_MspInit+0x44>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40021000 	.word	0x40021000

080012fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a17      	ldr	r2, [pc, #92]	; (8001378 <HAL_SPI_MspInit+0x7c>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d128      	bne.n	8001370 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800131e:	4b17      	ldr	r3, [pc, #92]	; (800137c <HAL_SPI_MspInit+0x80>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	4a16      	ldr	r2, [pc, #88]	; (800137c <HAL_SPI_MspInit+0x80>)
 8001324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001328:	61d3      	str	r3, [r2, #28]
 800132a:	4b14      	ldr	r3, [pc, #80]	; (800137c <HAL_SPI_MspInit+0x80>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <HAL_SPI_MspInit+0x80>)
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	4a10      	ldr	r2, [pc, #64]	; (800137c <HAL_SPI_MspInit+0x80>)
 800133c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001340:	6153      	str	r3, [r2, #20]
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <HAL_SPI_MspInit+0x80>)
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800134e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800135c:	2303      	movs	r3, #3
 800135e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001360:	2306      	movs	r3, #6
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	4805      	ldr	r0, [pc, #20]	; (8001380 <HAL_SPI_MspInit+0x84>)
 800136c:	f000 fa52 	bl	8001814 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001370:	bf00      	nop
 8001372:	3728      	adds	r7, #40	; 0x28
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40003c00 	.word	0x40003c00
 800137c:	40021000 	.word	0x40021000
 8001380:	48000800 	.word	0x48000800

08001384 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0d      	ldr	r2, [pc, #52]	; (80013c8 <HAL_TIM_Base_MspInit+0x44>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d113      	bne.n	80013be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001396:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <HAL_TIM_Base_MspInit+0x48>)
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	4a0c      	ldr	r2, [pc, #48]	; (80013cc <HAL_TIM_Base_MspInit+0x48>)
 800139c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013a0:	6193      	str	r3, [r2, #24]
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_TIM_Base_MspInit+0x48>)
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	2019      	movs	r0, #25
 80013b4:	f000 f9f7 	bl	80017a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80013b8:	2019      	movs	r0, #25
 80013ba:	f000 fa10 	bl	80017de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40012c00 	.word	0x40012c00
 80013cc:	40021000 	.word	0x40021000

080013d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <NMI_Handler+0x4>

080013d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013da:	e7fe      	b.n	80013da <HardFault_Handler+0x4>

080013dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <MemManage_Handler+0x4>

080013e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <BusFault_Handler+0x4>

080013e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <UsageFault_Handler+0x4>

080013ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800141c:	f000 f8a6 	bl	800156c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}

08001424 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001428:	f44f 7080 	mov.w	r0, #256	; 0x100
 800142c:	f000 fb9c 	bl	8001b68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001430:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001434:	f000 fb98 	bl	8001b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}

0800143c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001440:	4802      	ldr	r0, [pc, #8]	; (800144c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001442:	f002 fab6 	bl	80039b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000198 	.word	0x20000198

08001450 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001454:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001458:	f000 fb86 	bl	8001b68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800145c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001460:	f000 fb82 	bl	8001b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}

08001468 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <SystemInit+0x20>)
 800146e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001472:	4a05      	ldr	r2, [pc, #20]	; (8001488 <SystemInit+0x20>)
 8001474:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001478:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800148c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001490:	480d      	ldr	r0, [pc, #52]	; (80014c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001492:	490e      	ldr	r1, [pc, #56]	; (80014cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001494:	4a0e      	ldr	r2, [pc, #56]	; (80014d0 <LoopForever+0xe>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001498:	e002      	b.n	80014a0 <LoopCopyDataInit>

0800149a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800149c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149e:	3304      	adds	r3, #4

080014a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a4:	d3f9      	bcc.n	800149a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a6:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014a8:	4c0b      	ldr	r4, [pc, #44]	; (80014d8 <LoopForever+0x16>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ac:	e001      	b.n	80014b2 <LoopFillZerobss>

080014ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b0:	3204      	adds	r2, #4

080014b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b4:	d3fb      	bcc.n	80014ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014b6:	f7ff ffd7 	bl	8001468 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ba:	f003 f9c1 	bl	8004840 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014be:	f7ff fd73 	bl	8000fa8 <main>

080014c2 <LoopForever>:

LoopForever:
    b LoopForever
 80014c2:	e7fe      	b.n	80014c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014c4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80014c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014d0:	08004c7c 	.word	0x08004c7c
  ldr r2, =_sbss
 80014d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014d8:	200003e8 	.word	0x200003e8

080014dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014dc:	e7fe      	b.n	80014dc <ADC1_2_IRQHandler>
	...

080014e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <HAL_Init+0x28>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a07      	ldr	r2, [pc, #28]	; (8001508 <HAL_Init+0x28>)
 80014ea:	f043 0310 	orr.w	r3, r3, #16
 80014ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f0:	2003      	movs	r0, #3
 80014f2:	f000 f94d 	bl	8001790 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014f6:	2000      	movs	r0, #0
 80014f8:	f000 f808 	bl	800150c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014fc:	f7ff feda 	bl	80012b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40022000 	.word	0x40022000

0800150c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_InitTick+0x54>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_InitTick+0x58>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001522:	fbb3 f3f1 	udiv	r3, r3, r1
 8001526:	fbb2 f3f3 	udiv	r3, r2, r3
 800152a:	4618      	mov	r0, r3
 800152c:	f000 f965 	bl	80017fa <HAL_SYSTICK_Config>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e00e      	b.n	8001558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b0f      	cmp	r3, #15
 800153e:	d80a      	bhi.n	8001556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001540:	2200      	movs	r2, #0
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f000 f92d 	bl	80017a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800154c:	4a06      	ldr	r2, [pc, #24]	; (8001568 <HAL_InitTick+0x5c>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	e000      	b.n	8001558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000000 	.word	0x20000000
 8001564:	20000008 	.word	0x20000008
 8001568:	20000004 	.word	0x20000004

0800156c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_IncTick+0x20>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_IncTick+0x24>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4413      	add	r3, r2
 800157c:	4a04      	ldr	r2, [pc, #16]	; (8001590 <HAL_IncTick+0x24>)
 800157e:	6013      	str	r3, [r2, #0]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000008 	.word	0x20000008
 8001590:	200001e8 	.word	0x200001e8

08001594 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return uwTick;  
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <HAL_GetTick+0x14>)
 800159a:	681b      	ldr	r3, [r3, #0]
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	200001e8 	.word	0x200001e8

080015ac <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b4:	f7ff ffee 	bl	8001594 <HAL_GetTick>
 80015b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c4:	d005      	beq.n	80015d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_Delay+0x40>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4413      	add	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015d2:	bf00      	nop
 80015d4:	f7ff ffde 	bl	8001594 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d8f7      	bhi.n	80015d4 <HAL_Delay+0x28>
  {
  }
}
 80015e4:	bf00      	nop
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000008 	.word	0x20000008

080015f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800160c:	4013      	ands	r3, r2
 800160e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800161c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001622:	4a04      	ldr	r2, [pc, #16]	; (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	60d3      	str	r3, [r2, #12]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <__NVIC_GetPriorityGrouping+0x18>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	f003 0307 	and.w	r3, r3, #7
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	2b00      	cmp	r3, #0
 8001664:	db0b      	blt.n	800167e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	f003 021f 	and.w	r2, r3, #31
 800166c:	4907      	ldr	r1, [pc, #28]	; (800168c <__NVIC_EnableIRQ+0x38>)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	095b      	lsrs	r3, r3, #5
 8001674:	2001      	movs	r0, #1
 8001676:	fa00 f202 	lsl.w	r2, r0, r2
 800167a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000e100 	.word	0xe000e100

08001690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	db0a      	blt.n	80016ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	490c      	ldr	r1, [pc, #48]	; (80016dc <__NVIC_SetPriority+0x4c>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	0112      	lsls	r2, r2, #4
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	440b      	add	r3, r1
 80016b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b8:	e00a      	b.n	80016d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4908      	ldr	r1, [pc, #32]	; (80016e0 <__NVIC_SetPriority+0x50>)
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	3b04      	subs	r3, #4
 80016c8:	0112      	lsls	r2, r2, #4
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	440b      	add	r3, r1
 80016ce:	761a      	strb	r2, [r3, #24]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000e100 	.word	0xe000e100
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f1c3 0307 	rsb	r3, r3, #7
 80016fe:	2b04      	cmp	r3, #4
 8001700:	bf28      	it	cs
 8001702:	2304      	movcs	r3, #4
 8001704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3304      	adds	r3, #4
 800170a:	2b06      	cmp	r3, #6
 800170c:	d902      	bls.n	8001714 <NVIC_EncodePriority+0x30>
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3b03      	subs	r3, #3
 8001712:	e000      	b.n	8001716 <NVIC_EncodePriority+0x32>
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	f04f 32ff 	mov.w	r2, #4294967295
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43da      	mvns	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	401a      	ands	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800172c:	f04f 31ff 	mov.w	r1, #4294967295
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	43d9      	mvns	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	4313      	orrs	r3, r2
         );
}
 800173e:	4618      	mov	r0, r3
 8001740:	3724      	adds	r7, #36	; 0x24
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800175c:	d301      	bcc.n	8001762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800175e:	2301      	movs	r3, #1
 8001760:	e00f      	b.n	8001782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <SysTick_Config+0x40>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176a:	210f      	movs	r1, #15
 800176c:	f04f 30ff 	mov.w	r0, #4294967295
 8001770:	f7ff ff8e 	bl	8001690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <SysTick_Config+0x40>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177a:	4b04      	ldr	r3, [pc, #16]	; (800178c <SysTick_Config+0x40>)
 800177c:	2207      	movs	r2, #7
 800177e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	e000e010 	.word	0xe000e010

08001790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ff29 	bl	80015f0 <__NVIC_SetPriorityGrouping>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	4603      	mov	r3, r0
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
 80017b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017b8:	f7ff ff3e 	bl	8001638 <__NVIC_GetPriorityGrouping>
 80017bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	6978      	ldr	r0, [r7, #20]
 80017c4:	f7ff ff8e 	bl	80016e4 <NVIC_EncodePriority>
 80017c8:	4602      	mov	r2, r0
 80017ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff5d 	bl	8001690 <__NVIC_SetPriority>
}
 80017d6:	bf00      	nop
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff31 	bl	8001654 <__NVIC_EnableIRQ>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ffa2 	bl	800174c <SysTick_Config>
 8001808:	4603      	mov	r3, r0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001814:	b480      	push	{r7}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001822:	e154      	b.n	8001ace <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	2101      	movs	r1, #1
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	fa01 f303 	lsl.w	r3, r1, r3
 8001830:	4013      	ands	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 8146 	beq.w	8001ac8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	2b01      	cmp	r3, #1
 8001846:	d005      	beq.n	8001854 <HAL_GPIO_Init+0x40>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d130      	bne.n	80018b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	2203      	movs	r2, #3
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800188a:	2201      	movs	r2, #1
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	091b      	lsrs	r3, r3, #4
 80018a0:	f003 0201 	and.w	r2, r3, #1
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	2b03      	cmp	r3, #3
 80018c0:	d017      	beq.n	80018f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	2203      	movs	r2, #3
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d123      	bne.n	8001946 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	08da      	lsrs	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3208      	adds	r2, #8
 8001906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800190a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	220f      	movs	r2, #15
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	691a      	ldr	r2, [r3, #16]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	08da      	lsrs	r2, r3, #3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3208      	adds	r2, #8
 8001940:	6939      	ldr	r1, [r7, #16]
 8001942:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	2203      	movs	r2, #3
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 0203 	and.w	r2, r3, #3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 80a0 	beq.w	8001ac8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001988:	4b58      	ldr	r3, [pc, #352]	; (8001aec <HAL_GPIO_Init+0x2d8>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	4a57      	ldr	r2, [pc, #348]	; (8001aec <HAL_GPIO_Init+0x2d8>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6193      	str	r3, [r2, #24]
 8001994:	4b55      	ldr	r3, [pc, #340]	; (8001aec <HAL_GPIO_Init+0x2d8>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019a0:	4a53      	ldr	r2, [pc, #332]	; (8001af0 <HAL_GPIO_Init+0x2dc>)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	089b      	lsrs	r3, r3, #2
 80019a6:	3302      	adds	r3, #2
 80019a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	220f      	movs	r2, #15
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019ca:	d019      	beq.n	8001a00 <HAL_GPIO_Init+0x1ec>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a49      	ldr	r2, [pc, #292]	; (8001af4 <HAL_GPIO_Init+0x2e0>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d013      	beq.n	80019fc <HAL_GPIO_Init+0x1e8>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a48      	ldr	r2, [pc, #288]	; (8001af8 <HAL_GPIO_Init+0x2e4>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d00d      	beq.n	80019f8 <HAL_GPIO_Init+0x1e4>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a47      	ldr	r2, [pc, #284]	; (8001afc <HAL_GPIO_Init+0x2e8>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d007      	beq.n	80019f4 <HAL_GPIO_Init+0x1e0>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a46      	ldr	r2, [pc, #280]	; (8001b00 <HAL_GPIO_Init+0x2ec>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d101      	bne.n	80019f0 <HAL_GPIO_Init+0x1dc>
 80019ec:	2304      	movs	r3, #4
 80019ee:	e008      	b.n	8001a02 <HAL_GPIO_Init+0x1ee>
 80019f0:	2305      	movs	r3, #5
 80019f2:	e006      	b.n	8001a02 <HAL_GPIO_Init+0x1ee>
 80019f4:	2303      	movs	r3, #3
 80019f6:	e004      	b.n	8001a02 <HAL_GPIO_Init+0x1ee>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e002      	b.n	8001a02 <HAL_GPIO_Init+0x1ee>
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <HAL_GPIO_Init+0x1ee>
 8001a00:	2300      	movs	r3, #0
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	f002 0203 	and.w	r2, r2, #3
 8001a08:	0092      	lsls	r2, r2, #2
 8001a0a:	4093      	lsls	r3, r2
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a12:	4937      	ldr	r1, [pc, #220]	; (8001af0 <HAL_GPIO_Init+0x2dc>)
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	089b      	lsrs	r3, r3, #2
 8001a18:	3302      	adds	r3, #2
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a20:	4b38      	ldr	r3, [pc, #224]	; (8001b04 <HAL_GPIO_Init+0x2f0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a44:	4a2f      	ldr	r2, [pc, #188]	; (8001b04 <HAL_GPIO_Init+0x2f0>)
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a4a:	4b2e      	ldr	r3, [pc, #184]	; (8001b04 <HAL_GPIO_Init+0x2f0>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4013      	ands	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a6e:	4a25      	ldr	r2, [pc, #148]	; (8001b04 <HAL_GPIO_Init+0x2f0>)
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a74:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <HAL_GPIO_Init+0x2f0>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4013      	ands	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a98:	4a1a      	ldr	r2, [pc, #104]	; (8001b04 <HAL_GPIO_Init+0x2f0>)
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a9e:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <HAL_GPIO_Init+0x2f0>)
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ac2:	4a10      	ldr	r2, [pc, #64]	; (8001b04 <HAL_GPIO_Init+0x2f0>)
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	3301      	adds	r3, #1
 8001acc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f47f aea3 	bne.w	8001824 <HAL_GPIO_Init+0x10>
  }
}
 8001ade:	bf00      	nop
 8001ae0:	371c      	adds	r7, #28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40010000 	.word	0x40010000
 8001af4:	48000400 	.word	0x48000400
 8001af8:	48000800 	.word	0x48000800
 8001afc:	48000c00 	.word	0x48000c00
 8001b00:	48001000 	.word	0x48001000
 8001b04:	40010400 	.word	0x40010400

08001b08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691a      	ldr	r2, [r3, #16]
 8001b18:	887b      	ldrh	r3, [r7, #2]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d002      	beq.n	8001b26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
 8001b24:	e001      	b.n	8001b2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b26:	2300      	movs	r3, #0
 8001b28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	807b      	strh	r3, [r7, #2]
 8001b44:	4613      	mov	r3, r2
 8001b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b48:	787b      	ldrb	r3, [r7, #1]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b4e:	887a      	ldrh	r2, [r7, #2]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b54:	e002      	b.n	8001b5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b56:	887a      	ldrh	r2, [r7, #2]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b72:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d006      	beq.n	8001b8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b7e:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b80:	88fb      	ldrh	r3, [r7, #6]
 8001b82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fd6a 	bl	8000660 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40010400 	.word	0x40010400

08001b98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d102      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	f000 bef4 	b.w	800299a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 816a 	beq.w	8001e96 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001bc2:	4bb3      	ldr	r3, [pc, #716]	; (8001e90 <HAL_RCC_OscConfig+0x2f8>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d00c      	beq.n	8001be8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bce:	4bb0      	ldr	r3, [pc, #704]	; (8001e90 <HAL_RCC_OscConfig+0x2f8>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d159      	bne.n	8001c8e <HAL_RCC_OscConfig+0xf6>
 8001bda:	4bad      	ldr	r3, [pc, #692]	; (8001e90 <HAL_RCC_OscConfig+0x2f8>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be6:	d152      	bne.n	8001c8e <HAL_RCC_OscConfig+0xf6>
 8001be8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bec:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001bf4:	fa93 f3a3 	rbit	r3, r3
 8001bf8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bfc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c00:	fab3 f383 	clz	r3, r3
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d102      	bne.n	8001c1a <HAL_RCC_OscConfig+0x82>
 8001c14:	4b9e      	ldr	r3, [pc, #632]	; (8001e90 <HAL_RCC_OscConfig+0x2f8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	e015      	b.n	8001c46 <HAL_RCC_OscConfig+0xae>
 8001c1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c1e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001c26:	fa93 f3a3 	rbit	r3, r3
 8001c2a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001c2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c32:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001c36:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001c42:	4b93      	ldr	r3, [pc, #588]	; (8001e90 <HAL_RCC_OscConfig+0x2f8>)
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c4a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001c4e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001c52:	fa92 f2a2 	rbit	r2, r2
 8001c56:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001c5a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001c5e:	fab2 f282 	clz	r2, r2
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	f042 0220 	orr.w	r2, r2, #32
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	f002 021f 	and.w	r2, r2, #31
 8001c6e:	2101      	movs	r1, #1
 8001c70:	fa01 f202 	lsl.w	r2, r1, r2
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 810c 	beq.w	8001e94 <HAL_RCC_OscConfig+0x2fc>
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f040 8106 	bne.w	8001e94 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	f000 be86 	b.w	800299a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c98:	d106      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x110>
 8001c9a:	4b7d      	ldr	r3, [pc, #500]	; (8001e90 <HAL_RCC_OscConfig+0x2f8>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a7c      	ldr	r2, [pc, #496]	; (8001e90 <HAL_RCC_OscConfig+0x2f8>)
 8001ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	e030      	b.n	8001d0a <HAL_RCC_OscConfig+0x172>
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x134>
 8001cb2:	4b77      	ldr	r3, [pc, #476]	; (8001e90 <HAL_RCC_OscConfig+0x2f8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a76      	ldr	r2, [pc, #472]	; (8001e90 <HAL_RCC_OscConfig+0x2f8>)
 8001cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	4b74      	ldr	r3, [pc, #464]	; (8001e90 <HAL_RCC_OscConfig+0x2f8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a73      	ldr	r2, [pc, #460]	; (8001e90 <HAL_RCC_OscConfig+0x2f8>)
 8001cc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	e01e      	b.n	8001d0a <HAL_RCC_OscConfig+0x172>
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cd6:	d10c      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x15a>
 8001cd8:	4b6d      	ldr	r3, [pc, #436]	; (8001e90 <HAL_RCC_OscConfig+0x2f8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a6c      	ldr	r2, [pc, #432]	; (8001e90 <HAL_RCC_OscConfig+0x2f8>)
 8001cde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	4b6a      	ldr	r3, [pc, #424]	; (8001e90 <HAL_RCC_OscConfig+0x2f8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a69      	ldr	r2, [pc, #420]	; (8001e90 <HAL_RCC_OscConfig+0x2f8>)
 8001cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	e00b      	b.n	8001d0a <HAL_RCC_OscConfig+0x172>
 8001cf2:	4b67      	ldr	r3, [pc, #412]	; (8001e90 <HAL_RCC_OscConfig+0x2f8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a66      	ldr	r2, [pc, #408]	; (8001e90 <HAL_RCC_OscConfig+0x2f8>)
 8001cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	4b64      	ldr	r3, [pc, #400]	; (8001e90 <HAL_RCC_OscConfig+0x2f8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a63      	ldr	r2, [pc, #396]	; (8001e90 <HAL_RCC_OscConfig+0x2f8>)
 8001d04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d08:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d0a:	4b61      	ldr	r3, [pc, #388]	; (8001e90 <HAL_RCC_OscConfig+0x2f8>)
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0e:	f023 020f 	bic.w	r2, r3, #15
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	495d      	ldr	r1, [pc, #372]	; (8001e90 <HAL_RCC_OscConfig+0x2f8>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d059      	beq.n	8001ddc <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d28:	f7ff fc34 	bl	8001594 <HAL_GetTick>
 8001d2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d30:	e00a      	b.n	8001d48 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d32:	f7ff fc2f 	bl	8001594 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b64      	cmp	r3, #100	; 0x64
 8001d40:	d902      	bls.n	8001d48 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	f000 be29 	b.w	800299a <HAL_RCC_OscConfig+0xe02>
 8001d48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d4c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d50:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001d54:	fa93 f3a3 	rbit	r3, r3
 8001d58:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001d5c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d60:	fab3 f383 	clz	r3, r3
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d102      	bne.n	8001d7a <HAL_RCC_OscConfig+0x1e2>
 8001d74:	4b46      	ldr	r3, [pc, #280]	; (8001e90 <HAL_RCC_OscConfig+0x2f8>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	e015      	b.n	8001da6 <HAL_RCC_OscConfig+0x20e>
 8001d7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d7e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001d86:	fa93 f3a3 	rbit	r3, r3
 8001d8a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001d8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d92:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001d96:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001d9a:	fa93 f3a3 	rbit	r3, r3
 8001d9e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001da2:	4b3b      	ldr	r3, [pc, #236]	; (8001e90 <HAL_RCC_OscConfig+0x2f8>)
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001daa:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001dae:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001db2:	fa92 f2a2 	rbit	r2, r2
 8001db6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001dba:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001dbe:	fab2 f282 	clz	r2, r2
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	f042 0220 	orr.w	r2, r2, #32
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	f002 021f 	and.w	r2, r2, #31
 8001dce:	2101      	movs	r1, #1
 8001dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0ab      	beq.n	8001d32 <HAL_RCC_OscConfig+0x19a>
 8001dda:	e05c      	b.n	8001e96 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ddc:	f7ff fbda 	bl	8001594 <HAL_GetTick>
 8001de0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de4:	e00a      	b.n	8001dfc <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de6:	f7ff fbd5 	bl	8001594 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b64      	cmp	r3, #100	; 0x64
 8001df4:	d902      	bls.n	8001dfc <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	f000 bdcf 	b.w	800299a <HAL_RCC_OscConfig+0xe02>
 8001dfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e00:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e04:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001e08:	fa93 f3a3 	rbit	r3, r3
 8001e0c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001e10:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e14:	fab3 f383 	clz	r3, r3
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	095b      	lsrs	r3, r3, #5
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d102      	bne.n	8001e2e <HAL_RCC_OscConfig+0x296>
 8001e28:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <HAL_RCC_OscConfig+0x2f8>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	e015      	b.n	8001e5a <HAL_RCC_OscConfig+0x2c2>
 8001e2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e32:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001e3a:	fa93 f3a3 	rbit	r3, r3
 8001e3e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001e42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e46:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001e4a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001e4e:	fa93 f3a3 	rbit	r3, r3
 8001e52:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <HAL_RCC_OscConfig+0x2f8>)
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e5e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001e62:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001e66:	fa92 f2a2 	rbit	r2, r2
 8001e6a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001e6e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001e72:	fab2 f282 	clz	r2, r2
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	f042 0220 	orr.w	r2, r2, #32
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	f002 021f 	and.w	r2, r2, #31
 8001e82:	2101      	movs	r1, #1
 8001e84:	fa01 f202 	lsl.w	r2, r1, r2
 8001e88:	4013      	ands	r3, r2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1ab      	bne.n	8001de6 <HAL_RCC_OscConfig+0x24e>
 8001e8e:	e002      	b.n	8001e96 <HAL_RCC_OscConfig+0x2fe>
 8001e90:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 816f 	beq.w	8002184 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ea6:	4bd0      	ldr	r3, [pc, #832]	; (80021e8 <HAL_RCC_OscConfig+0x650>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00b      	beq.n	8001eca <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001eb2:	4bcd      	ldr	r3, [pc, #820]	; (80021e8 <HAL_RCC_OscConfig+0x650>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d16c      	bne.n	8001f98 <HAL_RCC_OscConfig+0x400>
 8001ebe:	4bca      	ldr	r3, [pc, #808]	; (80021e8 <HAL_RCC_OscConfig+0x650>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d166      	bne.n	8001f98 <HAL_RCC_OscConfig+0x400>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001ed4:	fa93 f3a3 	rbit	r3, r3
 8001ed8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001edc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee0:	fab3 f383 	clz	r3, r3
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d102      	bne.n	8001efa <HAL_RCC_OscConfig+0x362>
 8001ef4:	4bbc      	ldr	r3, [pc, #752]	; (80021e8 <HAL_RCC_OscConfig+0x650>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	e013      	b.n	8001f22 <HAL_RCC_OscConfig+0x38a>
 8001efa:	2302      	movs	r3, #2
 8001efc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f00:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001f04:	fa93 f3a3 	rbit	r3, r3
 8001f08:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001f12:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001f1e:	4bb2      	ldr	r3, [pc, #712]	; (80021e8 <HAL_RCC_OscConfig+0x650>)
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	2202      	movs	r2, #2
 8001f24:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001f28:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f2c:	fa92 f2a2 	rbit	r2, r2
 8001f30:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001f34:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001f38:	fab2 f282 	clz	r2, r2
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	f042 0220 	orr.w	r2, r2, #32
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	f002 021f 	and.w	r2, r2, #31
 8001f48:	2101      	movs	r1, #1
 8001f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d007      	beq.n	8001f64 <HAL_RCC_OscConfig+0x3cc>
 8001f54:	1d3b      	adds	r3, r7, #4
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d002      	beq.n	8001f64 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	f000 bd1b 	b.w	800299a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f64:	4ba0      	ldr	r3, [pc, #640]	; (80021e8 <HAL_RCC_OscConfig+0x650>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	21f8      	movs	r1, #248	; 0xf8
 8001f74:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f78:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001f7c:	fa91 f1a1 	rbit	r1, r1
 8001f80:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001f84:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001f88:	fab1 f181 	clz	r1, r1
 8001f8c:	b2c9      	uxtb	r1, r1
 8001f8e:	408b      	lsls	r3, r1
 8001f90:	4995      	ldr	r1, [pc, #596]	; (80021e8 <HAL_RCC_OscConfig+0x650>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f96:	e0f5      	b.n	8002184 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 8085 	beq.w	80020ae <HAL_RCC_OscConfig+0x516>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001fae:	fa93 f3a3 	rbit	r3, r3
 8001fb2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001fb6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fba:	fab3 f383 	clz	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	461a      	mov	r2, r3
 8001fcc:	2301      	movs	r3, #1
 8001fce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7ff fae0 	bl	8001594 <HAL_GetTick>
 8001fd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd8:	e00a      	b.n	8001ff0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fda:	f7ff fadb 	bl	8001594 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d902      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	f000 bcd5 	b.w	800299a <HAL_RCC_OscConfig+0xe02>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002002:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002006:	fab3 f383 	clz	r3, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	095b      	lsrs	r3, r3, #5
 800200e:	b2db      	uxtb	r3, r3
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b01      	cmp	r3, #1
 8002018:	d102      	bne.n	8002020 <HAL_RCC_OscConfig+0x488>
 800201a:	4b73      	ldr	r3, [pc, #460]	; (80021e8 <HAL_RCC_OscConfig+0x650>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	e013      	b.n	8002048 <HAL_RCC_OscConfig+0x4b0>
 8002020:	2302      	movs	r3, #2
 8002022:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002032:	2302      	movs	r3, #2
 8002034:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002038:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800203c:	fa93 f3a3 	rbit	r3, r3
 8002040:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002044:	4b68      	ldr	r3, [pc, #416]	; (80021e8 <HAL_RCC_OscConfig+0x650>)
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	2202      	movs	r2, #2
 800204a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800204e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002052:	fa92 f2a2 	rbit	r2, r2
 8002056:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800205a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800205e:	fab2 f282 	clz	r2, r2
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	f042 0220 	orr.w	r2, r2, #32
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	f002 021f 	and.w	r2, r2, #31
 800206e:	2101      	movs	r1, #1
 8002070:	fa01 f202 	lsl.w	r2, r1, r2
 8002074:	4013      	ands	r3, r2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0af      	beq.n	8001fda <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207a:	4b5b      	ldr	r3, [pc, #364]	; (80021e8 <HAL_RCC_OscConfig+0x650>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	21f8      	movs	r1, #248	; 0xf8
 800208a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002092:	fa91 f1a1 	rbit	r1, r1
 8002096:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800209a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800209e:	fab1 f181 	clz	r1, r1
 80020a2:	b2c9      	uxtb	r1, r1
 80020a4:	408b      	lsls	r3, r1
 80020a6:	4950      	ldr	r1, [pc, #320]	; (80021e8 <HAL_RCC_OscConfig+0x650>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	600b      	str	r3, [r1, #0]
 80020ac:	e06a      	b.n	8002184 <HAL_RCC_OscConfig+0x5ec>
 80020ae:	2301      	movs	r3, #1
 80020b0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80020b8:	fa93 f3a3 	rbit	r3, r3
 80020bc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80020c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020c4:	fab3 f383 	clz	r3, r3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	461a      	mov	r2, r3
 80020d6:	2300      	movs	r3, #0
 80020d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020da:	f7ff fa5b 	bl	8001594 <HAL_GetTick>
 80020de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e2:	e00a      	b.n	80020fa <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020e4:	f7ff fa56 	bl	8001594 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d902      	bls.n	80020fa <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	f000 bc50 	b.w	800299a <HAL_RCC_OscConfig+0xe02>
 80020fa:	2302      	movs	r3, #2
 80020fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002104:	fa93 f3a3 	rbit	r3, r3
 8002108:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800210c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002110:	fab3 f383 	clz	r3, r3
 8002114:	b2db      	uxtb	r3, r3
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	b2db      	uxtb	r3, r3
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b01      	cmp	r3, #1
 8002122:	d102      	bne.n	800212a <HAL_RCC_OscConfig+0x592>
 8002124:	4b30      	ldr	r3, [pc, #192]	; (80021e8 <HAL_RCC_OscConfig+0x650>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	e013      	b.n	8002152 <HAL_RCC_OscConfig+0x5ba>
 800212a:	2302      	movs	r3, #2
 800212c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002130:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002134:	fa93 f3a3 	rbit	r3, r3
 8002138:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800213c:	2302      	movs	r3, #2
 800213e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002142:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002146:	fa93 f3a3 	rbit	r3, r3
 800214a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800214e:	4b26      	ldr	r3, [pc, #152]	; (80021e8 <HAL_RCC_OscConfig+0x650>)
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	2202      	movs	r2, #2
 8002154:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002158:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800215c:	fa92 f2a2 	rbit	r2, r2
 8002160:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002164:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002168:	fab2 f282 	clz	r2, r2
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	f042 0220 	orr.w	r2, r2, #32
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	f002 021f 	and.w	r2, r2, #31
 8002178:	2101      	movs	r1, #1
 800217a:	fa01 f202 	lsl.w	r2, r1, r2
 800217e:	4013      	ands	r3, r2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1af      	bne.n	80020e4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002184:	1d3b      	adds	r3, r7, #4
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 80da 	beq.w	8002348 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002194:	1d3b      	adds	r3, r7, #4
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d069      	beq.n	8002272 <HAL_RCC_OscConfig+0x6da>
 800219e:	2301      	movs	r3, #1
 80021a0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80021a8:	fa93 f3a3 	rbit	r3, r3
 80021ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80021b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021b4:	fab3 f383 	clz	r3, r3
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	461a      	mov	r2, r3
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_RCC_OscConfig+0x654>)
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	461a      	mov	r2, r3
 80021c4:	2301      	movs	r3, #1
 80021c6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c8:	f7ff f9e4 	bl	8001594 <HAL_GetTick>
 80021cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d0:	e00e      	b.n	80021f0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021d2:	f7ff f9df 	bl	8001594 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d906      	bls.n	80021f0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e3d9      	b.n	800299a <HAL_RCC_OscConfig+0xe02>
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000
 80021ec:	10908120 	.word	0x10908120
 80021f0:	2302      	movs	r3, #2
 80021f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80021fa:	fa93 f3a3 	rbit	r3, r3
 80021fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002202:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002206:	2202      	movs	r2, #2
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	fa93 f2a3 	rbit	r2, r3
 8002214:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800221e:	2202      	movs	r2, #2
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	fa93 f2a3 	rbit	r2, r3
 800222c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002230:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002232:	4ba5      	ldr	r3, [pc, #660]	; (80024c8 <HAL_RCC_OscConfig+0x930>)
 8002234:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002236:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800223a:	2102      	movs	r1, #2
 800223c:	6019      	str	r1, [r3, #0]
 800223e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	fa93 f1a3 	rbit	r1, r3
 8002248:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800224c:	6019      	str	r1, [r3, #0]
  return result;
 800224e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	fab3 f383 	clz	r3, r3
 8002258:	b2db      	uxtb	r3, r3
 800225a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800225e:	b2db      	uxtb	r3, r3
 8002260:	f003 031f 	and.w	r3, r3, #31
 8002264:	2101      	movs	r1, #1
 8002266:	fa01 f303 	lsl.w	r3, r1, r3
 800226a:	4013      	ands	r3, r2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0b0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x63a>
 8002270:	e06a      	b.n	8002348 <HAL_RCC_OscConfig+0x7b0>
 8002272:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002276:	2201      	movs	r2, #1
 8002278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	fa93 f2a3 	rbit	r2, r3
 8002284:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002288:	601a      	str	r2, [r3, #0]
  return result;
 800228a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800228e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002290:	fab3 f383 	clz	r3, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	461a      	mov	r2, r3
 8002298:	4b8c      	ldr	r3, [pc, #560]	; (80024cc <HAL_RCC_OscConfig+0x934>)
 800229a:	4413      	add	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	461a      	mov	r2, r3
 80022a0:	2300      	movs	r3, #0
 80022a2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a4:	f7ff f976 	bl	8001594 <HAL_GetTick>
 80022a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ac:	e009      	b.n	80022c2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ae:	f7ff f971 	bl	8001594 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e36b      	b.n	800299a <HAL_RCC_OscConfig+0xe02>
 80022c2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80022c6:	2202      	movs	r2, #2
 80022c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ca:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	fa93 f2a3 	rbit	r2, r3
 80022d4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80022de:	2202      	movs	r2, #2
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	fa93 f2a3 	rbit	r2, r3
 80022ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80022f6:	2202      	movs	r2, #2
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	fa93 f2a3 	rbit	r2, r3
 8002304:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002308:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800230a:	4b6f      	ldr	r3, [pc, #444]	; (80024c8 <HAL_RCC_OscConfig+0x930>)
 800230c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800230e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002312:	2102      	movs	r1, #2
 8002314:	6019      	str	r1, [r3, #0]
 8002316:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	fa93 f1a3 	rbit	r1, r3
 8002320:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002324:	6019      	str	r1, [r3, #0]
  return result;
 8002326:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	fab3 f383 	clz	r3, r3
 8002330:	b2db      	uxtb	r3, r3
 8002332:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002336:	b2db      	uxtb	r3, r3
 8002338:	f003 031f 	and.w	r3, r3, #31
 800233c:	2101      	movs	r1, #1
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	4013      	ands	r3, r2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1b2      	bne.n	80022ae <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002348:	1d3b      	adds	r3, r7, #4
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 8158 	beq.w	8002608 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002358:	2300      	movs	r3, #0
 800235a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800235e:	4b5a      	ldr	r3, [pc, #360]	; (80024c8 <HAL_RCC_OscConfig+0x930>)
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d112      	bne.n	8002390 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236a:	4b57      	ldr	r3, [pc, #348]	; (80024c8 <HAL_RCC_OscConfig+0x930>)
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	4a56      	ldr	r2, [pc, #344]	; (80024c8 <HAL_RCC_OscConfig+0x930>)
 8002370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002374:	61d3      	str	r3, [r2, #28]
 8002376:	4b54      	ldr	r3, [pc, #336]	; (80024c8 <HAL_RCC_OscConfig+0x930>)
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800237e:	f107 0308 	add.w	r3, r7, #8
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	f107 0308 	add.w	r3, r7, #8
 8002388:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800238a:	2301      	movs	r3, #1
 800238c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002390:	4b4f      	ldr	r3, [pc, #316]	; (80024d0 <HAL_RCC_OscConfig+0x938>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d11a      	bne.n	80023d2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800239c:	4b4c      	ldr	r3, [pc, #304]	; (80024d0 <HAL_RCC_OscConfig+0x938>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a4b      	ldr	r2, [pc, #300]	; (80024d0 <HAL_RCC_OscConfig+0x938>)
 80023a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a8:	f7ff f8f4 	bl	8001594 <HAL_GetTick>
 80023ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b0:	e009      	b.n	80023c6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b2:	f7ff f8ef 	bl	8001594 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b64      	cmp	r3, #100	; 0x64
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e2e9      	b.n	800299a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c6:	4b42      	ldr	r3, [pc, #264]	; (80024d0 <HAL_RCC_OscConfig+0x938>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0ef      	beq.n	80023b2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d2:	1d3b      	adds	r3, r7, #4
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d106      	bne.n	80023ea <HAL_RCC_OscConfig+0x852>
 80023dc:	4b3a      	ldr	r3, [pc, #232]	; (80024c8 <HAL_RCC_OscConfig+0x930>)
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	4a39      	ldr	r2, [pc, #228]	; (80024c8 <HAL_RCC_OscConfig+0x930>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	6213      	str	r3, [r2, #32]
 80023e8:	e02f      	b.n	800244a <HAL_RCC_OscConfig+0x8b2>
 80023ea:	1d3b      	adds	r3, r7, #4
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10c      	bne.n	800240e <HAL_RCC_OscConfig+0x876>
 80023f4:	4b34      	ldr	r3, [pc, #208]	; (80024c8 <HAL_RCC_OscConfig+0x930>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	4a33      	ldr	r2, [pc, #204]	; (80024c8 <HAL_RCC_OscConfig+0x930>)
 80023fa:	f023 0301 	bic.w	r3, r3, #1
 80023fe:	6213      	str	r3, [r2, #32]
 8002400:	4b31      	ldr	r3, [pc, #196]	; (80024c8 <HAL_RCC_OscConfig+0x930>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	4a30      	ldr	r2, [pc, #192]	; (80024c8 <HAL_RCC_OscConfig+0x930>)
 8002406:	f023 0304 	bic.w	r3, r3, #4
 800240a:	6213      	str	r3, [r2, #32]
 800240c:	e01d      	b.n	800244a <HAL_RCC_OscConfig+0x8b2>
 800240e:	1d3b      	adds	r3, r7, #4
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	2b05      	cmp	r3, #5
 8002416:	d10c      	bne.n	8002432 <HAL_RCC_OscConfig+0x89a>
 8002418:	4b2b      	ldr	r3, [pc, #172]	; (80024c8 <HAL_RCC_OscConfig+0x930>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4a2a      	ldr	r2, [pc, #168]	; (80024c8 <HAL_RCC_OscConfig+0x930>)
 800241e:	f043 0304 	orr.w	r3, r3, #4
 8002422:	6213      	str	r3, [r2, #32]
 8002424:	4b28      	ldr	r3, [pc, #160]	; (80024c8 <HAL_RCC_OscConfig+0x930>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	4a27      	ldr	r2, [pc, #156]	; (80024c8 <HAL_RCC_OscConfig+0x930>)
 800242a:	f043 0301 	orr.w	r3, r3, #1
 800242e:	6213      	str	r3, [r2, #32]
 8002430:	e00b      	b.n	800244a <HAL_RCC_OscConfig+0x8b2>
 8002432:	4b25      	ldr	r3, [pc, #148]	; (80024c8 <HAL_RCC_OscConfig+0x930>)
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	4a24      	ldr	r2, [pc, #144]	; (80024c8 <HAL_RCC_OscConfig+0x930>)
 8002438:	f023 0301 	bic.w	r3, r3, #1
 800243c:	6213      	str	r3, [r2, #32]
 800243e:	4b22      	ldr	r3, [pc, #136]	; (80024c8 <HAL_RCC_OscConfig+0x930>)
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	4a21      	ldr	r2, [pc, #132]	; (80024c8 <HAL_RCC_OscConfig+0x930>)
 8002444:	f023 0304 	bic.w	r3, r3, #4
 8002448:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d06b      	beq.n	800252c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002454:	f7ff f89e 	bl	8001594 <HAL_GetTick>
 8002458:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245c:	e00b      	b.n	8002476 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800245e:	f7ff f899 	bl	8001594 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f241 3288 	movw	r2, #5000	; 0x1388
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e291      	b.n	800299a <HAL_RCC_OscConfig+0xe02>
 8002476:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800247a:	2202      	movs	r2, #2
 800247c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	fa93 f2a3 	rbit	r2, r3
 8002488:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002492:	2202      	movs	r2, #2
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	fa93 f2a3 	rbit	r2, r3
 80024a0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80024a4:	601a      	str	r2, [r3, #0]
  return result;
 80024a6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80024aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ac:	fab3 f383 	clz	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	f043 0302 	orr.w	r3, r3, #2
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d109      	bne.n	80024d4 <HAL_RCC_OscConfig+0x93c>
 80024c0:	4b01      	ldr	r3, [pc, #4]	; (80024c8 <HAL_RCC_OscConfig+0x930>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	e014      	b.n	80024f0 <HAL_RCC_OscConfig+0x958>
 80024c6:	bf00      	nop
 80024c8:	40021000 	.word	0x40021000
 80024cc:	10908120 	.word	0x10908120
 80024d0:	40007000 	.word	0x40007000
 80024d4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80024d8:	2202      	movs	r2, #2
 80024da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024dc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	fa93 f2a3 	rbit	r2, r3
 80024e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	4bbb      	ldr	r3, [pc, #748]	; (80027dc <HAL_RCC_OscConfig+0xc44>)
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024f4:	2102      	movs	r1, #2
 80024f6:	6011      	str	r1, [r2, #0]
 80024f8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024fc:	6812      	ldr	r2, [r2, #0]
 80024fe:	fa92 f1a2 	rbit	r1, r2
 8002502:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002506:	6011      	str	r1, [r2, #0]
  return result;
 8002508:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800250c:	6812      	ldr	r2, [r2, #0]
 800250e:	fab2 f282 	clz	r2, r2
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	f002 021f 	and.w	r2, r2, #31
 800251e:	2101      	movs	r1, #1
 8002520:	fa01 f202 	lsl.w	r2, r1, r2
 8002524:	4013      	ands	r3, r2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d099      	beq.n	800245e <HAL_RCC_OscConfig+0x8c6>
 800252a:	e063      	b.n	80025f4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252c:	f7ff f832 	bl	8001594 <HAL_GetTick>
 8002530:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002534:	e00b      	b.n	800254e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002536:	f7ff f82d 	bl	8001594 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	; 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e225      	b.n	800299a <HAL_RCC_OscConfig+0xe02>
 800254e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002552:	2202      	movs	r2, #2
 8002554:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	fa93 f2a3 	rbit	r2, r3
 8002560:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800256a:	2202      	movs	r2, #2
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	fa93 f2a3 	rbit	r2, r3
 8002578:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800257c:	601a      	str	r2, [r3, #0]
  return result;
 800257e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002582:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002584:	fab3 f383 	clz	r3, r3
 8002588:	b2db      	uxtb	r3, r3
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f043 0302 	orr.w	r3, r3, #2
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d102      	bne.n	800259e <HAL_RCC_OscConfig+0xa06>
 8002598:	4b90      	ldr	r3, [pc, #576]	; (80027dc <HAL_RCC_OscConfig+0xc44>)
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	e00d      	b.n	80025ba <HAL_RCC_OscConfig+0xa22>
 800259e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80025a2:	2202      	movs	r2, #2
 80025a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	fa93 f2a3 	rbit	r2, r3
 80025b0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	4b89      	ldr	r3, [pc, #548]	; (80027dc <HAL_RCC_OscConfig+0xc44>)
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80025be:	2102      	movs	r1, #2
 80025c0:	6011      	str	r1, [r2, #0]
 80025c2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	fa92 f1a2 	rbit	r1, r2
 80025cc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80025d0:	6011      	str	r1, [r2, #0]
  return result;
 80025d2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80025d6:	6812      	ldr	r2, [r2, #0]
 80025d8:	fab2 f282 	clz	r2, r2
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	f002 021f 	and.w	r2, r2, #31
 80025e8:	2101      	movs	r1, #1
 80025ea:	fa01 f202 	lsl.w	r2, r1, r2
 80025ee:	4013      	ands	r3, r2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1a0      	bne.n	8002536 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025f4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d105      	bne.n	8002608 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025fc:	4b77      	ldr	r3, [pc, #476]	; (80027dc <HAL_RCC_OscConfig+0xc44>)
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	4a76      	ldr	r2, [pc, #472]	; (80027dc <HAL_RCC_OscConfig+0xc44>)
 8002602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002606:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002608:	1d3b      	adds	r3, r7, #4
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 81c2 	beq.w	8002998 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002614:	4b71      	ldr	r3, [pc, #452]	; (80027dc <HAL_RCC_OscConfig+0xc44>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 030c 	and.w	r3, r3, #12
 800261c:	2b08      	cmp	r3, #8
 800261e:	f000 819c 	beq.w	800295a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002622:	1d3b      	adds	r3, r7, #4
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	2b02      	cmp	r3, #2
 800262a:	f040 8114 	bne.w	8002856 <HAL_RCC_OscConfig+0xcbe>
 800262e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002632:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002636:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	fa93 f2a3 	rbit	r2, r3
 8002642:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002646:	601a      	str	r2, [r3, #0]
  return result;
 8002648:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800264c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264e:	fab3 f383 	clz	r3, r3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002658:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	461a      	mov	r2, r3
 8002660:	2300      	movs	r3, #0
 8002662:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002664:	f7fe ff96 	bl	8001594 <HAL_GetTick>
 8002668:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800266c:	e009      	b.n	8002682 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266e:	f7fe ff91 	bl	8001594 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e18b      	b.n	800299a <HAL_RCC_OscConfig+0xe02>
 8002682:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002686:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800268a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	fa93 f2a3 	rbit	r2, r3
 8002696:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800269a:	601a      	str	r2, [r3, #0]
  return result;
 800269c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80026a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a2:	fab3 f383 	clz	r3, r3
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	095b      	lsrs	r3, r3, #5
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d102      	bne.n	80026bc <HAL_RCC_OscConfig+0xb24>
 80026b6:	4b49      	ldr	r3, [pc, #292]	; (80027dc <HAL_RCC_OscConfig+0xc44>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	e01b      	b.n	80026f4 <HAL_RCC_OscConfig+0xb5c>
 80026bc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80026c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	fa93 f2a3 	rbit	r2, r3
 80026d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80026da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	fa93 f2a3 	rbit	r2, r3
 80026ea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	4b3a      	ldr	r3, [pc, #232]	; (80027dc <HAL_RCC_OscConfig+0xc44>)
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026fc:	6011      	str	r1, [r2, #0]
 80026fe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002702:	6812      	ldr	r2, [r2, #0]
 8002704:	fa92 f1a2 	rbit	r1, r2
 8002708:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800270c:	6011      	str	r1, [r2, #0]
  return result;
 800270e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	fab2 f282 	clz	r2, r2
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	f042 0220 	orr.w	r2, r2, #32
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	f002 021f 	and.w	r2, r2, #31
 8002724:	2101      	movs	r1, #1
 8002726:	fa01 f202 	lsl.w	r2, r1, r2
 800272a:	4013      	ands	r3, r2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d19e      	bne.n	800266e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002730:	4b2a      	ldr	r3, [pc, #168]	; (80027dc <HAL_RCC_OscConfig+0xc44>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002738:	1d3b      	adds	r3, r7, #4
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800273e:	1d3b      	adds	r3, r7, #4
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	430b      	orrs	r3, r1
 8002746:	4925      	ldr	r1, [pc, #148]	; (80027dc <HAL_RCC_OscConfig+0xc44>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
 800274c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002750:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002754:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	fa93 f2a3 	rbit	r2, r3
 8002760:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002764:	601a      	str	r2, [r3, #0]
  return result;
 8002766:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800276a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800276c:	fab3 f383 	clz	r3, r3
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002776:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	461a      	mov	r2, r3
 800277e:	2301      	movs	r3, #1
 8002780:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002782:	f7fe ff07 	bl	8001594 <HAL_GetTick>
 8002786:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800278a:	e009      	b.n	80027a0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800278c:	f7fe ff02 	bl	8001594 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e0fc      	b.n	800299a <HAL_RCC_OscConfig+0xe02>
 80027a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80027a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	fa93 f2a3 	rbit	r2, r3
 80027b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027b8:	601a      	str	r2, [r3, #0]
  return result;
 80027ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027c0:	fab3 f383 	clz	r3, r3
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d105      	bne.n	80027e0 <HAL_RCC_OscConfig+0xc48>
 80027d4:	4b01      	ldr	r3, [pc, #4]	; (80027dc <HAL_RCC_OscConfig+0xc44>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	e01e      	b.n	8002818 <HAL_RCC_OscConfig+0xc80>
 80027da:	bf00      	nop
 80027dc:	40021000 	.word	0x40021000
 80027e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	fa93 f2a3 	rbit	r2, r3
 80027f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	fa93 f2a3 	rbit	r2, r3
 800280e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	4b63      	ldr	r3, [pc, #396]	; (80029a4 <HAL_RCC_OscConfig+0xe0c>)
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800281c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002820:	6011      	str	r1, [r2, #0]
 8002822:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	fa92 f1a2 	rbit	r1, r2
 800282c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002830:	6011      	str	r1, [r2, #0]
  return result;
 8002832:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	fab2 f282 	clz	r2, r2
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	f042 0220 	orr.w	r2, r2, #32
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	f002 021f 	and.w	r2, r2, #31
 8002848:	2101      	movs	r1, #1
 800284a:	fa01 f202 	lsl.w	r2, r1, r2
 800284e:	4013      	ands	r3, r2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d09b      	beq.n	800278c <HAL_RCC_OscConfig+0xbf4>
 8002854:	e0a0      	b.n	8002998 <HAL_RCC_OscConfig+0xe00>
 8002856:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800285a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800285e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002860:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	fa93 f2a3 	rbit	r2, r3
 800286a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800286e:	601a      	str	r2, [r3, #0]
  return result;
 8002870:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002874:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002876:	fab3 f383 	clz	r3, r3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002880:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	461a      	mov	r2, r3
 8002888:	2300      	movs	r3, #0
 800288a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7fe fe82 	bl	8001594 <HAL_GetTick>
 8002890:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002894:	e009      	b.n	80028aa <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002896:	f7fe fe7d 	bl	8001594 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e077      	b.n	800299a <HAL_RCC_OscConfig+0xe02>
 80028aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	fa93 f2a3 	rbit	r2, r3
 80028be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c2:	601a      	str	r2, [r3, #0]
  return result;
 80028c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	095b      	lsrs	r3, r3, #5
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d102      	bne.n	80028e4 <HAL_RCC_OscConfig+0xd4c>
 80028de:	4b31      	ldr	r3, [pc, #196]	; (80029a4 <HAL_RCC_OscConfig+0xe0c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	e01b      	b.n	800291c <HAL_RCC_OscConfig+0xd84>
 80028e4:	f107 0320 	add.w	r3, r7, #32
 80028e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	f107 0320 	add.w	r3, r7, #32
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	fa93 f2a3 	rbit	r2, r3
 80028f8:	f107 031c 	add.w	r3, r7, #28
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	f107 0318 	add.w	r3, r7, #24
 8002902:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	f107 0318 	add.w	r3, r7, #24
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	fa93 f2a3 	rbit	r2, r3
 8002912:	f107 0314 	add.w	r3, r7, #20
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <HAL_RCC_OscConfig+0xe0c>)
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	f107 0210 	add.w	r2, r7, #16
 8002920:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002924:	6011      	str	r1, [r2, #0]
 8002926:	f107 0210 	add.w	r2, r7, #16
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	fa92 f1a2 	rbit	r1, r2
 8002930:	f107 020c 	add.w	r2, r7, #12
 8002934:	6011      	str	r1, [r2, #0]
  return result;
 8002936:	f107 020c 	add.w	r2, r7, #12
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	fab2 f282 	clz	r2, r2
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	f042 0220 	orr.w	r2, r2, #32
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	f002 021f 	and.w	r2, r2, #31
 800294c:	2101      	movs	r1, #1
 800294e:	fa01 f202 	lsl.w	r2, r1, r2
 8002952:	4013      	ands	r3, r2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d19e      	bne.n	8002896 <HAL_RCC_OscConfig+0xcfe>
 8002958:	e01e      	b.n	8002998 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800295a:	1d3b      	adds	r3, r7, #4
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e018      	b.n	800299a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002968:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <HAL_RCC_OscConfig+0xe0c>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002970:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002974:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002978:	1d3b      	adds	r3, r7, #4
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	429a      	cmp	r2, r3
 8002980:	d108      	bne.n	8002994 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002982:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002986:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800298a:	1d3b      	adds	r3, r7, #4
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002990:	429a      	cmp	r2, r3
 8002992:	d001      	beq.n	8002998 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40021000 	.word	0x40021000

080029a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b09e      	sub	sp, #120	; 0x78
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e162      	b.n	8002c86 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029c0:	4b90      	ldr	r3, [pc, #576]	; (8002c04 <HAL_RCC_ClockConfig+0x25c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d910      	bls.n	80029f0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ce:	4b8d      	ldr	r3, [pc, #564]	; (8002c04 <HAL_RCC_ClockConfig+0x25c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f023 0207 	bic.w	r2, r3, #7
 80029d6:	498b      	ldr	r1, [pc, #556]	; (8002c04 <HAL_RCC_ClockConfig+0x25c>)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029de:	4b89      	ldr	r3, [pc, #548]	; (8002c04 <HAL_RCC_ClockConfig+0x25c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d001      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e14a      	b.n	8002c86 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029fc:	4b82      	ldr	r3, [pc, #520]	; (8002c08 <HAL_RCC_ClockConfig+0x260>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	497f      	ldr	r1, [pc, #508]	; (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 80dc 	beq.w	8002bd4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d13c      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xf6>
 8002a24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a28:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a2c:	fa93 f3a3 	rbit	r3, r3
 8002a30:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a34:	fab3 f383 	clz	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	095b      	lsrs	r3, r3, #5
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d102      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xa6>
 8002a48:	4b6f      	ldr	r3, [pc, #444]	; (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	e00f      	b.n	8002a6e <HAL_RCC_ClockConfig+0xc6>
 8002a4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	667b      	str	r3, [r7, #100]	; 0x64
 8002a5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a60:	663b      	str	r3, [r7, #96]	; 0x60
 8002a62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a6a:	4b67      	ldr	r3, [pc, #412]	; (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a72:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a76:	fa92 f2a2 	rbit	r2, r2
 8002a7a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002a7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a7e:	fab2 f282 	clz	r2, r2
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	f042 0220 	orr.w	r2, r2, #32
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	f002 021f 	and.w	r2, r2, #31
 8002a8e:	2101      	movs	r1, #1
 8002a90:	fa01 f202 	lsl.w	r2, r1, r2
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d17b      	bne.n	8002b92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e0f3      	b.n	8002c86 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d13c      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x178>
 8002aa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aaa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aae:	fa93 f3a3 	rbit	r3, r3
 8002ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab6:	fab3 f383 	clz	r3, r3
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	095b      	lsrs	r3, r3, #5
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d102      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x128>
 8002aca:	4b4f      	ldr	r3, [pc, #316]	; (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	e00f      	b.n	8002af0 <HAL_RCC_ClockConfig+0x148>
 8002ad0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ad4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ad8:	fa93 f3a3 	rbit	r3, r3
 8002adc:	647b      	str	r3, [r7, #68]	; 0x44
 8002ade:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ae2:	643b      	str	r3, [r7, #64]	; 0x40
 8002ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ae6:	fa93 f3a3 	rbit	r3, r3
 8002aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aec:	4b46      	ldr	r3, [pc, #280]	; (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002af4:	63ba      	str	r2, [r7, #56]	; 0x38
 8002af6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002af8:	fa92 f2a2 	rbit	r2, r2
 8002afc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002afe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b00:	fab2 f282 	clz	r2, r2
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	f042 0220 	orr.w	r2, r2, #32
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	f002 021f 	and.w	r2, r2, #31
 8002b10:	2101      	movs	r1, #1
 8002b12:	fa01 f202 	lsl.w	r2, r1, r2
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d13a      	bne.n	8002b92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0b2      	b.n	8002c86 <HAL_RCC_ClockConfig+0x2de>
 8002b20:	2302      	movs	r3, #2
 8002b22:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b26:	fa93 f3a3 	rbit	r3, r3
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2e:	fab3 f383 	clz	r3, r3
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	095b      	lsrs	r3, r3, #5
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d102      	bne.n	8002b48 <HAL_RCC_ClockConfig+0x1a0>
 8002b42:	4b31      	ldr	r3, [pc, #196]	; (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	e00d      	b.n	8002b64 <HAL_RCC_ClockConfig+0x1bc>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
 8002b54:	2302      	movs	r3, #2
 8002b56:	623b      	str	r3, [r7, #32]
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	61fb      	str	r3, [r7, #28]
 8002b60:	4b29      	ldr	r3, [pc, #164]	; (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	2202      	movs	r2, #2
 8002b66:	61ba      	str	r2, [r7, #24]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	fa92 f2a2 	rbit	r2, r2
 8002b6e:	617a      	str	r2, [r7, #20]
  return result;
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	fab2 f282 	clz	r2, r2
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	f042 0220 	orr.w	r2, r2, #32
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	f002 021f 	and.w	r2, r2, #31
 8002b82:	2101      	movs	r1, #1
 8002b84:	fa01 f202 	lsl.w	r2, r1, r2
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e079      	b.n	8002c86 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b92:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f023 0203 	bic.w	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	491a      	ldr	r1, [pc, #104]	; (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ba4:	f7fe fcf6 	bl	8001594 <HAL_GetTick>
 8002ba8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bac:	f7fe fcf2 	bl	8001594 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e061      	b.n	8002c86 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f003 020c 	and.w	r2, r3, #12
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d1eb      	bne.n	8002bac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <HAL_RCC_ClockConfig+0x25c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d214      	bcs.n	8002c0c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be2:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <HAL_RCC_ClockConfig+0x25c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 0207 	bic.w	r2, r3, #7
 8002bea:	4906      	ldr	r1, [pc, #24]	; (8002c04 <HAL_RCC_ClockConfig+0x25c>)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf2:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <HAL_RCC_ClockConfig+0x25c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d005      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e040      	b.n	8002c86 <HAL_RCC_ClockConfig+0x2de>
 8002c04:	40022000 	.word	0x40022000
 8002c08:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c18:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <HAL_RCC_ClockConfig+0x2e8>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	491a      	ldr	r1, [pc, #104]	; (8002c90 <HAL_RCC_ClockConfig+0x2e8>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d009      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c36:	4b16      	ldr	r3, [pc, #88]	; (8002c90 <HAL_RCC_ClockConfig+0x2e8>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	4912      	ldr	r1, [pc, #72]	; (8002c90 <HAL_RCC_ClockConfig+0x2e8>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c4a:	f000 f829 	bl	8002ca0 <HAL_RCC_GetSysClockFreq>
 8002c4e:	4601      	mov	r1, r0
 8002c50:	4b0f      	ldr	r3, [pc, #60]	; (8002c90 <HAL_RCC_ClockConfig+0x2e8>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c58:	22f0      	movs	r2, #240	; 0xf0
 8002c5a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	fa92 f2a2 	rbit	r2, r2
 8002c62:	60fa      	str	r2, [r7, #12]
  return result;
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	fab2 f282 	clz	r2, r2
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	40d3      	lsrs	r3, r2
 8002c6e:	4a09      	ldr	r2, [pc, #36]	; (8002c94 <HAL_RCC_ClockConfig+0x2ec>)
 8002c70:	5cd3      	ldrb	r3, [r2, r3]
 8002c72:	fa21 f303 	lsr.w	r3, r1, r3
 8002c76:	4a08      	ldr	r2, [pc, #32]	; (8002c98 <HAL_RCC_ClockConfig+0x2f0>)
 8002c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c7a:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <HAL_RCC_ClockConfig+0x2f4>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe fc44 	bl	800150c <HAL_InitTick>
  
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3778      	adds	r7, #120	; 0x78
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000
 8002c94:	080048bc 	.word	0x080048bc
 8002c98:	20000000 	.word	0x20000000
 8002c9c:	20000004 	.word	0x20000004

08002ca0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b08b      	sub	sp, #44	; 0x2c
 8002ca4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61fb      	str	r3, [r7, #28]
 8002caa:	2300      	movs	r3, #0
 8002cac:	61bb      	str	r3, [r7, #24]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002cba:	4b29      	ldr	r3, [pc, #164]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d002      	beq.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x30>
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d003      	beq.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x36>
 8002cce:	e03c      	b.n	8002d4a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cd0:	4b24      	ldr	r3, [pc, #144]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cd2:	623b      	str	r3, [r7, #32]
      break;
 8002cd4:	e03c      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002cdc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002ce0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	fa92 f2a2 	rbit	r2, r2
 8002ce8:	607a      	str	r2, [r7, #4]
  return result;
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	fab2 f282 	clz	r2, r2
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	40d3      	lsrs	r3, r2
 8002cf4:	4a1c      	ldr	r2, [pc, #112]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002cf6:	5cd3      	ldrb	r3, [r2, r3]
 8002cf8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002cfa:	4b19      	ldr	r3, [pc, #100]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	220f      	movs	r2, #15
 8002d04:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	fa92 f2a2 	rbit	r2, r2
 8002d0c:	60fa      	str	r2, [r7, #12]
  return result;
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	fab2 f282 	clz	r2, r2
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	40d3      	lsrs	r3, r2
 8002d18:	4a14      	ldr	r2, [pc, #80]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d1a:	5cd3      	ldrb	r3, [r2, r3]
 8002d1c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d28:	4a0e      	ldr	r2, [pc, #56]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	fb02 f303 	mul.w	r3, r2, r3
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
 8002d38:	e004      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	4a0c      	ldr	r2, [pc, #48]	; (8002d70 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d3e:	fb02 f303 	mul.w	r3, r2, r3
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	623b      	str	r3, [r7, #32]
      break;
 8002d48:	e002      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d4a:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d4c:	623b      	str	r3, [r7, #32]
      break;
 8002d4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d50:	6a3b      	ldr	r3, [r7, #32]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	372c      	adds	r7, #44	; 0x2c
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40021000 	.word	0x40021000
 8002d64:	007a1200 	.word	0x007a1200
 8002d68:	080048cc 	.word	0x080048cc
 8002d6c:	080048dc 	.word	0x080048dc
 8002d70:	003d0900 	.word	0x003d0900

08002d74 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b092      	sub	sp, #72	; 0x48
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002d84:	2300      	movs	r3, #0
 8002d86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 80d4 	beq.w	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d98:	4b4e      	ldr	r3, [pc, #312]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10e      	bne.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da4:	4b4b      	ldr	r3, [pc, #300]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	4a4a      	ldr	r2, [pc, #296]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dae:	61d3      	str	r3, [r2, #28]
 8002db0:	4b48      	ldr	r3, [pc, #288]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc2:	4b45      	ldr	r3, [pc, #276]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d118      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dce:	4b42      	ldr	r3, [pc, #264]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a41      	ldr	r2, [pc, #260]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dda:	f7fe fbdb 	bl	8001594 <HAL_GetTick>
 8002dde:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de0:	e008      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de2:	f7fe fbd7 	bl	8001594 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b64      	cmp	r3, #100	; 0x64
 8002dee:	d901      	bls.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e169      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df4:	4b38      	ldr	r3, [pc, #224]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0f0      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e00:	4b34      	ldr	r3, [pc, #208]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e08:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 8084 	beq.w	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d07c      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e20:	4b2c      	ldr	r3, [pc, #176]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e32:	fa93 f3a3 	rbit	r3, r3
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e3a:	fab3 f383 	clz	r3, r3
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	461a      	mov	r2, r3
 8002e42:	4b26      	ldr	r3, [pc, #152]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	461a      	mov	r2, r3
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e56:	fa93 f3a3 	rbit	r3, r3
 8002e5a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e5e:	fab3 f383 	clz	r3, r3
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	461a      	mov	r2, r3
 8002e66:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	2300      	movs	r3, #0
 8002e70:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e72:	4a18      	ldr	r2, [pc, #96]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e76:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d04b      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e82:	f7fe fb87 	bl	8001594 <HAL_GetTick>
 8002e86:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e88:	e00a      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8a:	f7fe fb83 	bl	8001594 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e113      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea6:	fa93 f3a3 	rbit	r3, r3
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8002eac:	2302      	movs	r3, #2
 8002eae:	623b      	str	r3, [r7, #32]
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	fa93 f3a3 	rbit	r3, r3
 8002eb6:	61fb      	str	r3, [r7, #28]
  return result;
 8002eb8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eba:	fab3 f383 	clz	r3, r3
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	095b      	lsrs	r3, r3, #5
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	f043 0302 	orr.w	r3, r3, #2
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d108      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002ece:	4b01      	ldr	r3, [pc, #4]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	e00d      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40007000 	.word	0x40007000
 8002edc:	10908100 	.word	0x10908100
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	fa93 f3a3 	rbit	r3, r3
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	4b78      	ldr	r3, [pc, #480]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	613a      	str	r2, [r7, #16]
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	fa92 f2a2 	rbit	r2, r2
 8002efa:	60fa      	str	r2, [r7, #12]
  return result;
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	fab2 f282 	clz	r2, r2
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f08:	b2d2      	uxtb	r2, r2
 8002f0a:	f002 021f 	and.w	r2, r2, #31
 8002f0e:	2101      	movs	r1, #1
 8002f10:	fa01 f202 	lsl.w	r2, r1, r2
 8002f14:	4013      	ands	r3, r2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0b7      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f1a:	4b6d      	ldr	r3, [pc, #436]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	496a      	ldr	r1, [pc, #424]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f2c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d105      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f34:	4b66      	ldr	r3, [pc, #408]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	4a65      	ldr	r2, [pc, #404]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f4c:	4b60      	ldr	r3, [pc, #384]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	f023 0203 	bic.w	r2, r3, #3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	495d      	ldr	r1, [pc, #372]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d008      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f6a:	4b59      	ldr	r3, [pc, #356]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	4956      	ldr	r1, [pc, #344]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d008      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f88:	4b51      	ldr	r3, [pc, #324]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	494e      	ldr	r1, [pc, #312]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0320 	and.w	r3, r3, #32
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d008      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fa6:	4b4a      	ldr	r3, [pc, #296]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	f023 0210 	bic.w	r2, r3, #16
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	4947      	ldr	r1, [pc, #284]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002fc4:	4b42      	ldr	r3, [pc, #264]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd0:	493f      	ldr	r1, [pc, #252]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d008      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fe2:	4b3b      	ldr	r3, [pc, #236]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	f023 0220 	bic.w	r2, r3, #32
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	4938      	ldr	r1, [pc, #224]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003000:	4b33      	ldr	r3, [pc, #204]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003004:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	4930      	ldr	r1, [pc, #192]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800300e:	4313      	orrs	r3, r2
 8003010:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0310 	and.w	r3, r3, #16
 800301a:	2b00      	cmp	r3, #0
 800301c:	d008      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800301e:	4b2c      	ldr	r3, [pc, #176]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	4929      	ldr	r1, [pc, #164]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800302c:	4313      	orrs	r3, r2
 800302e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003038:	2b00      	cmp	r3, #0
 800303a:	d008      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800303c:	4b24      	ldr	r3, [pc, #144]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	4921      	ldr	r1, [pc, #132]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800304a:	4313      	orrs	r3, r2
 800304c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003056:	2b00      	cmp	r3, #0
 8003058:	d008      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800305a:	4b1d      	ldr	r3, [pc, #116]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	491a      	ldr	r1, [pc, #104]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003068:	4313      	orrs	r3, r2
 800306a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003074:	2b00      	cmp	r3, #0
 8003076:	d008      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003078:	4b15      	ldr	r3, [pc, #84]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003084:	4912      	ldr	r1, [pc, #72]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003086:	4313      	orrs	r3, r2
 8003088:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d008      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003096:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	490b      	ldr	r1, [pc, #44]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80030b4:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c0:	4903      	ldr	r1, [pc, #12]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3748      	adds	r7, #72	; 0x48
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40021000 	.word	0x40021000

080030d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e09d      	b.n	8003222 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d108      	bne.n	8003100 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030f6:	d009      	beq.n	800310c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	61da      	str	r2, [r3, #28]
 80030fe:	e005      	b.n	800310c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fe f8e8 	bl	80012fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003142:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800314c:	d902      	bls.n	8003154 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	e002      	b.n	800315a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003158:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003162:	d007      	beq.n	8003174 <HAL_SPI_Init+0xa0>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800316c:	d002      	beq.n	8003174 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69db      	ldr	r3, [r3, #28]
 80031a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031ac:	431a      	orrs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b6:	ea42 0103 	orr.w	r1, r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	0c1b      	lsrs	r3, r3, #16
 80031d0:	f003 0204 	and.w	r2, r3, #4
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80031f0:	ea42 0103 	orr.w	r1, r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	69da      	ldr	r2, [r3, #28]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003210:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b088      	sub	sp, #32
 800322e:	af00      	add	r7, sp, #0
 8003230:	60f8      	str	r0, [r7, #12]
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	603b      	str	r3, [r7, #0]
 8003236:	4613      	mov	r3, r2
 8003238:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003244:	2b01      	cmp	r3, #1
 8003246:	d101      	bne.n	800324c <HAL_SPI_Transmit+0x22>
 8003248:	2302      	movs	r3, #2
 800324a:	e158      	b.n	80034fe <HAL_SPI_Transmit+0x2d4>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003254:	f7fe f99e 	bl	8001594 <HAL_GetTick>
 8003258:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800325a:	88fb      	ldrh	r3, [r7, #6]
 800325c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b01      	cmp	r3, #1
 8003268:	d002      	beq.n	8003270 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800326a:	2302      	movs	r3, #2
 800326c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800326e:	e13d      	b.n	80034ec <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <HAL_SPI_Transmit+0x52>
 8003276:	88fb      	ldrh	r3, [r7, #6]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d102      	bne.n	8003282 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003280:	e134      	b.n	80034ec <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2203      	movs	r2, #3
 8003286:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	88fa      	ldrh	r2, [r7, #6]
 800329a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	88fa      	ldrh	r2, [r7, #6]
 80032a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032cc:	d10f      	bne.n	80032ee <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f8:	2b40      	cmp	r3, #64	; 0x40
 80032fa:	d007      	beq.n	800330c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800330a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003314:	d94b      	bls.n	80033ae <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d002      	beq.n	8003324 <HAL_SPI_Transmit+0xfa>
 800331e:	8afb      	ldrh	r3, [r7, #22]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d13e      	bne.n	80033a2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003328:	881a      	ldrh	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003334:	1c9a      	adds	r2, r3, #2
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800333e:	b29b      	uxth	r3, r3
 8003340:	3b01      	subs	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003348:	e02b      	b.n	80033a2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b02      	cmp	r3, #2
 8003356:	d112      	bne.n	800337e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335c:	881a      	ldrh	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003368:	1c9a      	adds	r2, r3, #2
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003372:	b29b      	uxth	r3, r3
 8003374:	3b01      	subs	r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800337c:	e011      	b.n	80033a2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800337e:	f7fe f909 	bl	8001594 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d803      	bhi.n	8003396 <HAL_SPI_Transmit+0x16c>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003394:	d102      	bne.n	800339c <HAL_SPI_Transmit+0x172>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d102      	bne.n	80033a2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033a0:	e0a4      	b.n	80034ec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1ce      	bne.n	800334a <HAL_SPI_Transmit+0x120>
 80033ac:	e07c      	b.n	80034a8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <HAL_SPI_Transmit+0x192>
 80033b6:	8afb      	ldrh	r3, [r7, #22]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d170      	bne.n	800349e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d912      	bls.n	80033ec <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ca:	881a      	ldrh	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d6:	1c9a      	adds	r2, r3, #2
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b02      	subs	r3, #2
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033ea:	e058      	b.n	800349e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	330c      	adds	r3, #12
 80033f6:	7812      	ldrb	r2, [r2, #0]
 80033f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003408:	b29b      	uxth	r3, r3
 800340a:	3b01      	subs	r3, #1
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003412:	e044      	b.n	800349e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b02      	cmp	r3, #2
 8003420:	d12b      	bne.n	800347a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003426:	b29b      	uxth	r3, r3
 8003428:	2b01      	cmp	r3, #1
 800342a:	d912      	bls.n	8003452 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003430:	881a      	ldrh	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	1c9a      	adds	r2, r3, #2
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003446:	b29b      	uxth	r3, r3
 8003448:	3b02      	subs	r3, #2
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003450:	e025      	b.n	800349e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	330c      	adds	r3, #12
 800345c:	7812      	ldrb	r2, [r2, #0]
 800345e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003464:	1c5a      	adds	r2, r3, #1
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800346e:	b29b      	uxth	r3, r3
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003478:	e011      	b.n	800349e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800347a:	f7fe f88b 	bl	8001594 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d803      	bhi.n	8003492 <HAL_SPI_Transmit+0x268>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003490:	d102      	bne.n	8003498 <HAL_SPI_Transmit+0x26e>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d102      	bne.n	800349e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800349c:	e026      	b.n	80034ec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1b5      	bne.n	8003414 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	6839      	ldr	r1, [r7, #0]
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f949 	bl	8003744 <SPI_EndRxTxTransaction>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2220      	movs	r2, #32
 80034bc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10a      	bne.n	80034dc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034c6:	2300      	movs	r3, #0
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	613b      	str	r3, [r7, #16]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	77fb      	strb	r3, [r7, #31]
 80034e8:	e000      	b.n	80034ec <HAL_SPI_Transmit+0x2c2>
  }

error:
 80034ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80034fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3720      	adds	r7, #32
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b088      	sub	sp, #32
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	4613      	mov	r3, r2
 8003516:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003518:	f7fe f83c 	bl	8001594 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	4413      	add	r3, r2
 8003526:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003528:	f7fe f834 	bl	8001594 <HAL_GetTick>
 800352c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800352e:	4b39      	ldr	r3, [pc, #228]	; (8003614 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	015b      	lsls	r3, r3, #5
 8003534:	0d1b      	lsrs	r3, r3, #20
 8003536:	69fa      	ldr	r2, [r7, #28]
 8003538:	fb02 f303 	mul.w	r3, r2, r3
 800353c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800353e:	e054      	b.n	80035ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003546:	d050      	beq.n	80035ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003548:	f7fe f824 	bl	8001594 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	69fa      	ldr	r2, [r7, #28]
 8003554:	429a      	cmp	r2, r3
 8003556:	d902      	bls.n	800355e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d13d      	bne.n	80035da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800356c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003576:	d111      	bne.n	800359c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003580:	d004      	beq.n	800358c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800358a:	d107      	bne.n	800359c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800359a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035a4:	d10f      	bne.n	80035c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e017      	b.n	800360a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	3b01      	subs	r3, #1
 80035e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	4013      	ands	r3, r2
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	bf0c      	ite	eq
 80035fa:	2301      	moveq	r3, #1
 80035fc:	2300      	movne	r3, #0
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	461a      	mov	r2, r3
 8003602:	79fb      	ldrb	r3, [r7, #7]
 8003604:	429a      	cmp	r2, r3
 8003606:	d19b      	bne.n	8003540 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3720      	adds	r7, #32
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	20000000 	.word	0x20000000

08003618 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08a      	sub	sp, #40	; 0x28
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003626:	2300      	movs	r3, #0
 8003628:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800362a:	f7fd ffb3 	bl	8001594 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003632:	1a9b      	subs	r3, r3, r2
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	4413      	add	r3, r2
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800363a:	f7fd ffab 	bl	8001594 <HAL_GetTick>
 800363e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	330c      	adds	r3, #12
 8003646:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003648:	4b3d      	ldr	r3, [pc, #244]	; (8003740 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	00da      	lsls	r2, r3, #3
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	0d1b      	lsrs	r3, r3, #20
 8003658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800365a:	fb02 f303 	mul.w	r3, r2, r3
 800365e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003660:	e060      	b.n	8003724 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003668:	d107      	bne.n	800367a <SPI_WaitFifoStateUntilTimeout+0x62>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d104      	bne.n	800367a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003678:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003680:	d050      	beq.n	8003724 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003682:	f7fd ff87 	bl	8001594 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368e:	429a      	cmp	r2, r3
 8003690:	d902      	bls.n	8003698 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	2b00      	cmp	r3, #0
 8003696:	d13d      	bne.n	8003714 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036b0:	d111      	bne.n	80036d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ba:	d004      	beq.n	80036c6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c4:	d107      	bne.n	80036d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036de:	d10f      	bne.n	8003700 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e010      	b.n	8003736 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	3b01      	subs	r3, #1
 8003722:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	4013      	ands	r3, r2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	429a      	cmp	r2, r3
 8003732:	d196      	bne.n	8003662 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3728      	adds	r7, #40	; 0x28
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20000000 	.word	0x20000000

08003744 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af02      	add	r7, sp, #8
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2200      	movs	r2, #0
 8003758:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f7ff ff5b 	bl	8003618 <SPI_WaitFifoStateUntilTimeout>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d007      	beq.n	8003778 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800376c:	f043 0220 	orr.w	r2, r3, #32
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e027      	b.n	80037c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2200      	movs	r2, #0
 8003780:	2180      	movs	r1, #128	; 0x80
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f7ff fec0 	bl	8003508 <SPI_WaitFlagStateUntilTimeout>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d007      	beq.n	800379e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003792:	f043 0220 	orr.w	r2, r3, #32
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e014      	b.n	80037c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f7ff ff34 	bl	8003618 <SPI_WaitFifoStateUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d007      	beq.n	80037c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ba:	f043 0220 	orr.w	r2, r3, #32
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e000      	b.n	80037c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e049      	b.n	8003876 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d106      	bne.n	80037fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7fd fdc4 	bl	8001384 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3304      	adds	r3, #4
 800380c:	4619      	mov	r1, r3
 800380e:	4610      	mov	r0, r2
 8003810:	f000 fad4 	bl	8003dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b01      	cmp	r3, #1
 8003892:	d001      	beq.n	8003898 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e04a      	b.n	800392e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a21      	ldr	r2, [pc, #132]	; (800393c <HAL_TIM_Base_Start_IT+0xbc>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d018      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0x6c>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c2:	d013      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0x6c>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a1d      	ldr	r2, [pc, #116]	; (8003940 <HAL_TIM_Base_Start_IT+0xc0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00e      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0x6c>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a1c      	ldr	r2, [pc, #112]	; (8003944 <HAL_TIM_Base_Start_IT+0xc4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d009      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0x6c>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a1a      	ldr	r2, [pc, #104]	; (8003948 <HAL_TIM_Base_Start_IT+0xc8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d004      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0x6c>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a19      	ldr	r2, [pc, #100]	; (800394c <HAL_TIM_Base_Start_IT+0xcc>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d115      	bne.n	8003918 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689a      	ldr	r2, [r3, #8]
 80038f2:	4b17      	ldr	r3, [pc, #92]	; (8003950 <HAL_TIM_Base_Start_IT+0xd0>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2b06      	cmp	r3, #6
 80038fc:	d015      	beq.n	800392a <HAL_TIM_Base_Start_IT+0xaa>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003904:	d011      	beq.n	800392a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0201 	orr.w	r2, r2, #1
 8003914:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003916:	e008      	b.n	800392a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	e000      	b.n	800392c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800392a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40012c00 	.word	0x40012c00
 8003940:	40000400 	.word	0x40000400
 8003944:	40000800 	.word	0x40000800
 8003948:	40013400 	.word	0x40013400
 800394c:	40014000 	.word	0x40014000
 8003950:	00010007 	.word	0x00010007

08003954 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0201 	bic.w	r2, r2, #1
 800396a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6a1a      	ldr	r2, [r3, #32]
 8003972:	f241 1311 	movw	r3, #4369	; 0x1111
 8003976:	4013      	ands	r3, r2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10f      	bne.n	800399c <HAL_TIM_Base_Stop_IT+0x48>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6a1a      	ldr	r2, [r3, #32]
 8003982:	f240 4344 	movw	r3, #1092	; 0x444
 8003986:	4013      	ands	r3, r2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d107      	bne.n	800399c <HAL_TIM_Base_Stop_IT+0x48>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0201 	bic.w	r2, r2, #1
 800399a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d122      	bne.n	8003a0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d11b      	bne.n	8003a0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f06f 0202 	mvn.w	r2, #2
 80039de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f9c3 	bl	8003d80 <HAL_TIM_IC_CaptureCallback>
 80039fa:	e005      	b.n	8003a08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f9b5 	bl	8003d6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f9c6 	bl	8003d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	d122      	bne.n	8003a62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f003 0304 	and.w	r3, r3, #4
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	d11b      	bne.n	8003a62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f06f 0204 	mvn.w	r2, #4
 8003a32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f999 	bl	8003d80 <HAL_TIM_IC_CaptureCallback>
 8003a4e:	e005      	b.n	8003a5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f98b 	bl	8003d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f99c 	bl	8003d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	f003 0308 	and.w	r3, r3, #8
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d122      	bne.n	8003ab6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b08      	cmp	r3, #8
 8003a7c:	d11b      	bne.n	8003ab6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f06f 0208 	mvn.w	r2, #8
 8003a86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	f003 0303 	and.w	r3, r3, #3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f96f 	bl	8003d80 <HAL_TIM_IC_CaptureCallback>
 8003aa2:	e005      	b.n	8003ab0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f961 	bl	8003d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f972 	bl	8003d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	f003 0310 	and.w	r3, r3, #16
 8003ac0:	2b10      	cmp	r3, #16
 8003ac2:	d122      	bne.n	8003b0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f003 0310 	and.w	r3, r3, #16
 8003ace:	2b10      	cmp	r3, #16
 8003ad0:	d11b      	bne.n	8003b0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f06f 0210 	mvn.w	r2, #16
 8003ada:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2208      	movs	r2, #8
 8003ae0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f945 	bl	8003d80 <HAL_TIM_IC_CaptureCallback>
 8003af6:	e005      	b.n	8003b04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f937 	bl	8003d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f948 	bl	8003d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d10e      	bne.n	8003b36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d107      	bne.n	8003b36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f06f 0201 	mvn.w	r2, #1
 8003b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f7fd f893 	bl	8000c5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b40:	2b80      	cmp	r3, #128	; 0x80
 8003b42:	d10e      	bne.n	8003b62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4e:	2b80      	cmp	r3, #128	; 0x80
 8003b50:	d107      	bne.n	8003b62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 fae1 	bl	8004124 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b70:	d10e      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7c:	2b80      	cmp	r3, #128	; 0x80
 8003b7e:	d107      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 fad4 	bl	8004138 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9a:	2b40      	cmp	r3, #64	; 0x40
 8003b9c:	d10e      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba8:	2b40      	cmp	r3, #64	; 0x40
 8003baa:	d107      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f8f6 	bl	8003da8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f003 0320 	and.w	r3, r3, #32
 8003bc6:	2b20      	cmp	r3, #32
 8003bc8:	d10e      	bne.n	8003be8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	2b20      	cmp	r3, #32
 8003bd6:	d107      	bne.n	8003be8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f06f 0220 	mvn.w	r2, #32
 8003be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 fa94 	bl	8004110 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003be8:	bf00      	nop
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_TIM_ConfigClockSource+0x1c>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e0ab      	b.n	8003d64 <HAL_TIM_ConfigClockSource+0x174>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b40      	cmp	r3, #64	; 0x40
 8003c46:	d067      	beq.n	8003d18 <HAL_TIM_ConfigClockSource+0x128>
 8003c48:	2b40      	cmp	r3, #64	; 0x40
 8003c4a:	d80b      	bhi.n	8003c64 <HAL_TIM_ConfigClockSource+0x74>
 8003c4c:	2b10      	cmp	r3, #16
 8003c4e:	d073      	beq.n	8003d38 <HAL_TIM_ConfigClockSource+0x148>
 8003c50:	2b10      	cmp	r3, #16
 8003c52:	d802      	bhi.n	8003c5a <HAL_TIM_ConfigClockSource+0x6a>
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d06f      	beq.n	8003d38 <HAL_TIM_ConfigClockSource+0x148>
 8003c58:	e077      	b.n	8003d4a <HAL_TIM_ConfigClockSource+0x15a>
 8003c5a:	2b20      	cmp	r3, #32
 8003c5c:	d06c      	beq.n	8003d38 <HAL_TIM_ConfigClockSource+0x148>
 8003c5e:	2b30      	cmp	r3, #48	; 0x30
 8003c60:	d06a      	beq.n	8003d38 <HAL_TIM_ConfigClockSource+0x148>
 8003c62:	e072      	b.n	8003d4a <HAL_TIM_ConfigClockSource+0x15a>
 8003c64:	2b70      	cmp	r3, #112	; 0x70
 8003c66:	d00d      	beq.n	8003c84 <HAL_TIM_ConfigClockSource+0x94>
 8003c68:	2b70      	cmp	r3, #112	; 0x70
 8003c6a:	d804      	bhi.n	8003c76 <HAL_TIM_ConfigClockSource+0x86>
 8003c6c:	2b50      	cmp	r3, #80	; 0x50
 8003c6e:	d033      	beq.n	8003cd8 <HAL_TIM_ConfigClockSource+0xe8>
 8003c70:	2b60      	cmp	r3, #96	; 0x60
 8003c72:	d041      	beq.n	8003cf8 <HAL_TIM_ConfigClockSource+0x108>
 8003c74:	e069      	b.n	8003d4a <HAL_TIM_ConfigClockSource+0x15a>
 8003c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7a:	d069      	beq.n	8003d50 <HAL_TIM_ConfigClockSource+0x160>
 8003c7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c80:	d017      	beq.n	8003cb2 <HAL_TIM_ConfigClockSource+0xc2>
 8003c82:	e062      	b.n	8003d4a <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6818      	ldr	r0, [r3, #0]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	6899      	ldr	r1, [r3, #8]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f000 f99c 	bl	8003fd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ca6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	609a      	str	r2, [r3, #8]
      break;
 8003cb0:	e04f      	b.n	8003d52 <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	6899      	ldr	r1, [r3, #8]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f000 f985 	bl	8003fd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cd4:	609a      	str	r2, [r3, #8]
      break;
 8003cd6:	e03c      	b.n	8003d52 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6818      	ldr	r0, [r3, #0]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	6859      	ldr	r1, [r3, #4]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	f000 f8f9 	bl	8003edc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2150      	movs	r1, #80	; 0x50
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 f952 	bl	8003f9a <TIM_ITRx_SetConfig>
      break;
 8003cf6:	e02c      	b.n	8003d52 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	6859      	ldr	r1, [r3, #4]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	461a      	mov	r2, r3
 8003d06:	f000 f918 	bl	8003f3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2160      	movs	r1, #96	; 0x60
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 f942 	bl	8003f9a <TIM_ITRx_SetConfig>
      break;
 8003d16:	e01c      	b.n	8003d52 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	6859      	ldr	r1, [r3, #4]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	461a      	mov	r2, r3
 8003d26:	f000 f8d9 	bl	8003edc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2140      	movs	r1, #64	; 0x40
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 f932 	bl	8003f9a <TIM_ITRx_SetConfig>
      break;
 8003d36:	e00c      	b.n	8003d52 <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4619      	mov	r1, r3
 8003d42:	4610      	mov	r0, r2
 8003d44:	f000 f929 	bl	8003f9a <TIM_ITRx_SetConfig>
      break;
 8003d48:	e003      	b.n	8003d52 <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	73fb      	strb	r3, [r7, #15]
      break;
 8003d4e:	e000      	b.n	8003d52 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8003d50:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a3c      	ldr	r2, [pc, #240]	; (8003ec0 <TIM_Base_SetConfig+0x104>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00f      	beq.n	8003df4 <TIM_Base_SetConfig+0x38>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dda:	d00b      	beq.n	8003df4 <TIM_Base_SetConfig+0x38>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a39      	ldr	r2, [pc, #228]	; (8003ec4 <TIM_Base_SetConfig+0x108>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d007      	beq.n	8003df4 <TIM_Base_SetConfig+0x38>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a38      	ldr	r2, [pc, #224]	; (8003ec8 <TIM_Base_SetConfig+0x10c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d003      	beq.n	8003df4 <TIM_Base_SetConfig+0x38>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a37      	ldr	r2, [pc, #220]	; (8003ecc <TIM_Base_SetConfig+0x110>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d108      	bne.n	8003e06 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a2d      	ldr	r2, [pc, #180]	; (8003ec0 <TIM_Base_SetConfig+0x104>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d01b      	beq.n	8003e46 <TIM_Base_SetConfig+0x8a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e14:	d017      	beq.n	8003e46 <TIM_Base_SetConfig+0x8a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a2a      	ldr	r2, [pc, #168]	; (8003ec4 <TIM_Base_SetConfig+0x108>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d013      	beq.n	8003e46 <TIM_Base_SetConfig+0x8a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a29      	ldr	r2, [pc, #164]	; (8003ec8 <TIM_Base_SetConfig+0x10c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d00f      	beq.n	8003e46 <TIM_Base_SetConfig+0x8a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a28      	ldr	r2, [pc, #160]	; (8003ecc <TIM_Base_SetConfig+0x110>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d00b      	beq.n	8003e46 <TIM_Base_SetConfig+0x8a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a27      	ldr	r2, [pc, #156]	; (8003ed0 <TIM_Base_SetConfig+0x114>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d007      	beq.n	8003e46 <TIM_Base_SetConfig+0x8a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a26      	ldr	r2, [pc, #152]	; (8003ed4 <TIM_Base_SetConfig+0x118>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d003      	beq.n	8003e46 <TIM_Base_SetConfig+0x8a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a25      	ldr	r2, [pc, #148]	; (8003ed8 <TIM_Base_SetConfig+0x11c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d108      	bne.n	8003e58 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a10      	ldr	r2, [pc, #64]	; (8003ec0 <TIM_Base_SetConfig+0x104>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d00f      	beq.n	8003ea4 <TIM_Base_SetConfig+0xe8>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a11      	ldr	r2, [pc, #68]	; (8003ecc <TIM_Base_SetConfig+0x110>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d00b      	beq.n	8003ea4 <TIM_Base_SetConfig+0xe8>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a10      	ldr	r2, [pc, #64]	; (8003ed0 <TIM_Base_SetConfig+0x114>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d007      	beq.n	8003ea4 <TIM_Base_SetConfig+0xe8>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a0f      	ldr	r2, [pc, #60]	; (8003ed4 <TIM_Base_SetConfig+0x118>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d003      	beq.n	8003ea4 <TIM_Base_SetConfig+0xe8>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a0e      	ldr	r2, [pc, #56]	; (8003ed8 <TIM_Base_SetConfig+0x11c>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d103      	bne.n	8003eac <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	615a      	str	r2, [r3, #20]
}
 8003eb2:	bf00      	nop
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40012c00 	.word	0x40012c00
 8003ec4:	40000400 	.word	0x40000400
 8003ec8:	40000800 	.word	0x40000800
 8003ecc:	40013400 	.word	0x40013400
 8003ed0:	40014000 	.word	0x40014000
 8003ed4:	40014400 	.word	0x40014400
 8003ed8:	40014800 	.word	0x40014800

08003edc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b087      	sub	sp, #28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	f023 0201 	bic.w	r2, r3, #1
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f023 030a 	bic.w	r3, r3, #10
 8003f18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	621a      	str	r2, [r3, #32]
}
 8003f2e:	bf00      	nop
 8003f30:	371c      	adds	r7, #28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b087      	sub	sp, #28
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	60f8      	str	r0, [r7, #12]
 8003f42:	60b9      	str	r1, [r7, #8]
 8003f44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	f023 0210 	bic.w	r2, r3, #16
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	031b      	lsls	r3, r3, #12
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	011b      	lsls	r3, r3, #4
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	621a      	str	r2, [r3, #32]
}
 8003f8e:	bf00      	nop
 8003f90:	371c      	adds	r7, #28
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b085      	sub	sp, #20
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
 8003fa2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f043 0307 	orr.w	r3, r3, #7
 8003fbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	609a      	str	r2, [r3, #8]
}
 8003fc4:	bf00      	nop
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	021a      	lsls	r2, r3, #8
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	609a      	str	r2, [r3, #8]
}
 8004004:	bf00      	nop
 8004006:	371c      	adds	r7, #28
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004024:	2302      	movs	r3, #2
 8004026:	e063      	b.n	80040f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a2b      	ldr	r2, [pc, #172]	; (80040fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d004      	beq.n	800405c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a2a      	ldr	r2, [pc, #168]	; (8004100 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d108      	bne.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004062:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004074:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4313      	orrs	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a1b      	ldr	r2, [pc, #108]	; (80040fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d018      	beq.n	80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800409a:	d013      	beq.n	80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a18      	ldr	r2, [pc, #96]	; (8004104 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d00e      	beq.n	80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a17      	ldr	r2, [pc, #92]	; (8004108 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d009      	beq.n	80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a12      	ldr	r2, [pc, #72]	; (8004100 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d004      	beq.n	80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a13      	ldr	r2, [pc, #76]	; (800410c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d10c      	bne.n	80040de <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	40012c00 	.word	0x40012c00
 8004100:	40013400 	.word	0x40013400
 8004104:	40000400 	.word	0x40000400
 8004108:	40000800 	.word	0x40000800
 800410c:	40014000 	.word	0x40014000

08004110 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <PCD8544_send>:
	{ 0x1F, 0x1F, 0x1F },   // delete
};

uint8_t dat = 0;

void PCD8544_send(uint8_t data) {
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	4603      	mov	r3, r0
 8004154:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(PCD8544_CE_PORT, PCD8544_CE_PIN, GPIO_PIN_RESET);
 8004156:	2200      	movs	r2, #0
 8004158:	2120      	movs	r1, #32
 800415a:	480b      	ldr	r0, [pc, #44]	; (8004188 <PCD8544_send+0x3c>)
 800415c:	f7fd fcec 	bl	8001b38 <HAL_GPIO_WritePin>
	dat = data;
 8004160:	4a0a      	ldr	r2, [pc, #40]	; (800418c <PCD8544_send+0x40>)
 8004162:	79fb      	ldrb	r3, [r7, #7]
 8004164:	7013      	strb	r3, [r2, #0]
	HAL_SPI_Transmit(&PCD8544_SPI, &dat, 1, HAL_MAX_DELAY);
 8004166:	f04f 33ff 	mov.w	r3, #4294967295
 800416a:	2201      	movs	r2, #1
 800416c:	4907      	ldr	r1, [pc, #28]	; (800418c <PCD8544_send+0x40>)
 800416e:	4808      	ldr	r0, [pc, #32]	; (8004190 <PCD8544_send+0x44>)
 8004170:	f7ff f85b 	bl	800322a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PCD8544_CE_PORT, PCD8544_CE_PIN, GPIO_PIN_SET);
 8004174:	2201      	movs	r2, #1
 8004176:	2120      	movs	r1, #32
 8004178:	4803      	ldr	r0, [pc, #12]	; (8004188 <PCD8544_send+0x3c>)
 800417a:	f7fd fcdd 	bl	8001b38 <HAL_GPIO_WritePin>
}
 800417e:	bf00      	nop
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	48000c00 	.word	0x48000c00
 800418c:	2000002e 	.word	0x2000002e
 8004190:	20000130 	.word	0x20000130

08004194 <PCD8544_Init>:
			break;
		default: break;
	}
}

void PCD8544_Init(unsigned char contrast) {
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	4603      	mov	r3, r0
 800419c:	71fb      	strb	r3, [r7, #7]

	//Reset
	HAL_GPIO_WritePin(PCD8544_RST_PORT, PCD8544_RST_PIN, GPIO_PIN_RESET);
 800419e:	2200      	movs	r2, #0
 80041a0:	2180      	movs	r1, #128	; 0x80
 80041a2:	481a      	ldr	r0, [pc, #104]	; (800420c <PCD8544_Init+0x78>)
 80041a4:	f7fd fcc8 	bl	8001b38 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80041a8:	200a      	movs	r0, #10
 80041aa:	f7fd f9ff 	bl	80015ac <HAL_Delay>
	HAL_GPIO_WritePin(PCD8544_RST_PORT, PCD8544_RST_PIN, GPIO_PIN_SET);
 80041ae:	2201      	movs	r2, #1
 80041b0:	2180      	movs	r1, #128	; 0x80
 80041b2:	4816      	ldr	r0, [pc, #88]	; (800420c <PCD8544_Init+0x78>)
 80041b4:	f7fd fcc0 	bl	8001b38 <HAL_GPIO_WritePin>

	// Go in extended mode
	PCD8544_Write(PCD8544_COMMAND, PCD8544_FUNCTIONSET | PCD8544_EXTENDEDINSTRUCTION);
 80041b8:	2121      	movs	r1, #33	; 0x21
 80041ba:	2000      	movs	r0, #0
 80041bc:	f000 f828 	bl	8004210 <PCD8544_Write>

	// LCD bias select
	PCD8544_Write(PCD8544_COMMAND, PCD8544_SETBIAS | 0x4);
 80041c0:	2114      	movs	r1, #20
 80041c2:	2000      	movs	r0, #0
 80041c4:	f000 f824 	bl	8004210 <PCD8544_Write>

	// set VOP
	if (contrast > 0x7F) {
 80041c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	da01      	bge.n	80041d4 <PCD8544_Init+0x40>
		contrast = 0x7F;
 80041d0:	237f      	movs	r3, #127	; 0x7f
 80041d2:	71fb      	strb	r3, [r7, #7]
	}
	PCD8544_Write(PCD8544_COMMAND, PCD8544_SETVOP | contrast);
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	4619      	mov	r1, r3
 80041de:	2000      	movs	r0, #0
 80041e0:	f000 f816 	bl	8004210 <PCD8544_Write>

	// normal mode
	PCD8544_Write(PCD8544_COMMAND, PCD8544_FUNCTIONSET);
 80041e4:	2120      	movs	r1, #32
 80041e6:	2000      	movs	r0, #0
 80041e8:	f000 f812 	bl	8004210 <PCD8544_Write>

	// Set display to Normal
	PCD8544_Write(PCD8544_COMMAND, PCD8544_DISPLAYCONTROL | PCD8544_DISPLAYNORMAL);
 80041ec:	210c      	movs	r1, #12
 80041ee:	2000      	movs	r0, #0
 80041f0:	f000 f80e 	bl	8004210 <PCD8544_Write>

	//Set cursor to home position
	PCD8544_Home();
 80041f4:	f000 f8ac 	bl	8004350 <PCD8544_Home>

	//Normal display
	PCD8544_Write(PCD8544_COMMAND, PCD8544_DISPLAYCONTROL | PCD8544_DISPLAYNORMAL);
 80041f8:	210c      	movs	r1, #12
 80041fa:	2000      	movs	r0, #0
 80041fc:	f000 f808 	bl	8004210 <PCD8544_Write>

	//Clear display
	PCD8544_Clear();
 8004200:	f000 f880 	bl	8004304 <PCD8544_Clear>
}
 8004204:	bf00      	nop
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	48000c00 	.word	0x48000c00

08004210 <PCD8544_Write>:

void PCD8544_Write(PCD8544_WriteType_t cd, uint8_t data) {
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	4603      	mov	r3, r0
 8004218:	460a      	mov	r2, r1
 800421a:	71fb      	strb	r3, [r7, #7]
 800421c:	4613      	mov	r3, r2
 800421e:	71bb      	strb	r3, [r7, #6]
	switch (cd) {
 8004220:	79fb      	ldrb	r3, [r7, #7]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d008      	beq.n	8004238 <PCD8544_Write+0x28>
 8004226:	2b01      	cmp	r3, #1
 8004228:	d000      	beq.n	800422c <PCD8544_Write+0x1c>
		//Send command to lcd
		case PCD8544_COMMAND:
			//Set DC pin LOW
			HAL_GPIO_WritePin(PCD8544_DC_PORT, PCD8544_DC_PIN, GPIO_PIN_RESET);
			break;
		default: break;
 800422a:	e00b      	b.n	8004244 <PCD8544_Write+0x34>
			HAL_GPIO_WritePin(PCD8544_DC_PORT, PCD8544_DC_PIN, GPIO_PIN_SET);
 800422c:	2201      	movs	r2, #1
 800422e:	2108      	movs	r1, #8
 8004230:	4808      	ldr	r0, [pc, #32]	; (8004254 <PCD8544_Write+0x44>)
 8004232:	f7fd fc81 	bl	8001b38 <HAL_GPIO_WritePin>
			break;
 8004236:	e005      	b.n	8004244 <PCD8544_Write+0x34>
			HAL_GPIO_WritePin(PCD8544_DC_PORT, PCD8544_DC_PIN, GPIO_PIN_RESET);
 8004238:	2200      	movs	r2, #0
 800423a:	2108      	movs	r1, #8
 800423c:	4805      	ldr	r0, [pc, #20]	; (8004254 <PCD8544_Write+0x44>)
 800423e:	f7fd fc7b 	bl	8001b38 <HAL_GPIO_WritePin>
			break;
 8004242:	bf00      	nop
	}
	//Send data
	PCD8544_send(data);
 8004244:	79bb      	ldrb	r3, [r7, #6]
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff ff80 	bl	800414c <PCD8544_send>
}
 800424c:	bf00      	nop
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	48000c00 	.word	0x48000c00

08004258 <PCD8544_DrawPixel>:

	// normal mode
	PCD8544_Write(PCD8544_COMMAND, PCD8544_FUNCTIONSET);
}

void PCD8544_DrawPixel(unsigned char x, unsigned char y, bool pixel) {
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	4603      	mov	r3, r0
 8004260:	71fb      	strb	r3, [r7, #7]
 8004262:	460b      	mov	r3, r1
 8004264:	71bb      	strb	r3, [r7, #6]
 8004266:	4613      	mov	r3, r2
 8004268:	717b      	strb	r3, [r7, #5]
	if (pixel == 1) {
 800426a:	797b      	ldrb	r3, [r7, #5]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d01d      	beq.n	80042ac <PCD8544_DrawPixel+0x54>
		PCD8544_Buffer[x + (y / 8) * PCD8544_WIDTH] |= 1 << (y % 8);
 8004270:	79fa      	ldrb	r2, [r7, #7]
 8004272:	79bb      	ldrb	r3, [r7, #6]
 8004274:	08db      	lsrs	r3, r3, #3
 8004276:	b2d8      	uxtb	r0, r3
 8004278:	4601      	mov	r1, r0
 800427a:	2354      	movs	r3, #84	; 0x54
 800427c:	fb03 f301 	mul.w	r3, r3, r1
 8004280:	4413      	add	r3, r2
 8004282:	4a1f      	ldr	r2, [pc, #124]	; (8004300 <PCD8544_DrawPixel+0xa8>)
 8004284:	5cd3      	ldrb	r3, [r2, r3]
 8004286:	b25a      	sxtb	r2, r3
 8004288:	79bb      	ldrb	r3, [r7, #6]
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	2101      	movs	r1, #1
 8004290:	fa01 f303 	lsl.w	r3, r1, r3
 8004294:	b25b      	sxtb	r3, r3
 8004296:	4313      	orrs	r3, r2
 8004298:	b259      	sxtb	r1, r3
 800429a:	79fa      	ldrb	r2, [r7, #7]
 800429c:	2354      	movs	r3, #84	; 0x54
 800429e:	fb03 f300 	mul.w	r3, r3, r0
 80042a2:	4413      	add	r3, r2
 80042a4:	b2c9      	uxtb	r1, r1
 80042a6:	4a16      	ldr	r2, [pc, #88]	; (8004300 <PCD8544_DrawPixel+0xa8>)
 80042a8:	54d1      	strb	r1, [r2, r3]
 80042aa:	e01e      	b.n	80042ea <PCD8544_DrawPixel+0x92>
	} else {
		PCD8544_Buffer[x + (y / 8) * PCD8544_WIDTH] &= ~(1 << (y % 8));
 80042ac:	79fa      	ldrb	r2, [r7, #7]
 80042ae:	79bb      	ldrb	r3, [r7, #6]
 80042b0:	08db      	lsrs	r3, r3, #3
 80042b2:	b2d8      	uxtb	r0, r3
 80042b4:	4601      	mov	r1, r0
 80042b6:	2354      	movs	r3, #84	; 0x54
 80042b8:	fb03 f301 	mul.w	r3, r3, r1
 80042bc:	4413      	add	r3, r2
 80042be:	4a10      	ldr	r2, [pc, #64]	; (8004300 <PCD8544_DrawPixel+0xa8>)
 80042c0:	5cd3      	ldrb	r3, [r2, r3]
 80042c2:	b25a      	sxtb	r2, r3
 80042c4:	79bb      	ldrb	r3, [r7, #6]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	2101      	movs	r1, #1
 80042cc:	fa01 f303 	lsl.w	r3, r1, r3
 80042d0:	b25b      	sxtb	r3, r3
 80042d2:	43db      	mvns	r3, r3
 80042d4:	b25b      	sxtb	r3, r3
 80042d6:	4013      	ands	r3, r2
 80042d8:	b259      	sxtb	r1, r3
 80042da:	79fa      	ldrb	r2, [r7, #7]
 80042dc:	2354      	movs	r3, #84	; 0x54
 80042de:	fb03 f300 	mul.w	r3, r3, r0
 80042e2:	4413      	add	r3, r2
 80042e4:	b2c9      	uxtb	r1, r1
 80042e6:	4a06      	ldr	r2, [pc, #24]	; (8004300 <PCD8544_DrawPixel+0xa8>)
 80042e8:	54d1      	strb	r1, [r2, r3]
	}
	PCD8544_UpdateArea(x, y, x, y);
 80042ea:	79bb      	ldrb	r3, [r7, #6]
 80042ec:	79fa      	ldrb	r2, [r7, #7]
 80042ee:	79b9      	ldrb	r1, [r7, #6]
 80042f0:	79f8      	ldrb	r0, [r7, #7]
 80042f2:	f000 f89b 	bl	800442c <PCD8544_UpdateArea>
}
 80042f6:	bf00      	nop
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	200001f0 	.word	0x200001f0

08004304 <PCD8544_Clear>:
	} else {
		PCD8544_Write(PCD8544_COMMAND, PCD8544_DISPLAYCONTROL | PCD8544_DISPLAYNORMAL);
	}
}

void PCD8544_Clear(void) {
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
	unsigned int i;
	PCD8544_Home();
 800430a:	f000 f821 	bl	8004350 <PCD8544_Home>
	for (i = 0; i < PCD8544_BUFFER_SIZE; i++) {
 800430e:	2300      	movs	r3, #0
 8004310:	607b      	str	r3, [r7, #4]
 8004312:	e007      	b.n	8004324 <PCD8544_Clear+0x20>
		PCD8544_Buffer[i] = 0x00;
 8004314:	4a0d      	ldr	r2, [pc, #52]	; (800434c <PCD8544_Clear+0x48>)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4413      	add	r3, r2
 800431a:	2200      	movs	r2, #0
 800431c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < PCD8544_BUFFER_SIZE; i++) {
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3301      	adds	r3, #1
 8004322:	607b      	str	r3, [r7, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800432a:	d3f3      	bcc.n	8004314 <PCD8544_Clear+0x10>
		//PCD8544_Write(PCD8544_DATA, 0x00);
	}
	PCD8544_GotoXY(0, 0);
 800432c:	2100      	movs	r1, #0
 800432e:	2000      	movs	r0, #0
 8004330:	f000 f8b8 	bl	80044a4 <PCD8544_GotoXY>
	PCD8544_UpdateArea(0, 0, PCD8544_WIDTH - 1, PCD8544_HEIGHT - 1);
 8004334:	232f      	movs	r3, #47	; 0x2f
 8004336:	2253      	movs	r2, #83	; 0x53
 8004338:	2100      	movs	r1, #0
 800433a:	2000      	movs	r0, #0
 800433c:	f000 f876 	bl	800442c <PCD8544_UpdateArea>
	PCD8544_Refresh();
 8004340:	f000 f812 	bl	8004368 <PCD8544_Refresh>
}
 8004344:	bf00      	nop
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	200001f0 	.word	0x200001f0

08004350 <PCD8544_Home>:

void PCD8544_Home(void) {
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
	PCD8544_Write(PCD8544_COMMAND, PCD8544_SETXADDR | 0);
 8004354:	2180      	movs	r1, #128	; 0x80
 8004356:	2000      	movs	r0, #0
 8004358:	f7ff ff5a 	bl	8004210 <PCD8544_Write>
	PCD8544_Write(PCD8544_COMMAND, PCD8544_SETYADDR | 0);
 800435c:	2140      	movs	r1, #64	; 0x40
 800435e:	2000      	movs	r0, #0
 8004360:	f7ff ff56 	bl	8004210 <PCD8544_Write>
}
 8004364:	bf00      	nop
 8004366:	bd80      	pop	{r7, pc}

08004368 <PCD8544_Refresh>:

void PCD8544_Refresh(void) {
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
	unsigned char i, j;
	for (i = 0; i < 6; i++) {
 800436e:	2300      	movs	r3, #0
 8004370:	71fb      	strb	r3, [r7, #7]
 8004372:	e03b      	b.n	80043ec <PCD8544_Refresh+0x84>
		//Not in range yet
		if (PCD8544_UpdateYmin > ((i + 1) * 8)) {
 8004374:	4b28      	ldr	r3, [pc, #160]	; (8004418 <PCD8544_Refresh+0xb0>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	461a      	mov	r2, r3
 800437a:	79fb      	ldrb	r3, [r7, #7]
 800437c:	3301      	adds	r3, #1
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	429a      	cmp	r2, r3
 8004382:	dc2f      	bgt.n	80043e4 <PCD8544_Refresh+0x7c>
			continue;
		}
		//Over range, stop
		if ((i * 8) > PCD8544_UpdateYmax) {
 8004384:	79fb      	ldrb	r3, [r7, #7]
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	4a24      	ldr	r2, [pc, #144]	; (800441c <PCD8544_Refresh+0xb4>)
 800438a:	7812      	ldrb	r2, [r2, #0]
 800438c:	4293      	cmp	r3, r2
 800438e:	dc31      	bgt.n	80043f4 <PCD8544_Refresh+0x8c>
			break;
		}

		PCD8544_Write(PCD8544_COMMAND, PCD8544_SETYADDR | i);
 8004390:	79fb      	ldrb	r3, [r7, #7]
 8004392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004396:	b2db      	uxtb	r3, r3
 8004398:	4619      	mov	r1, r3
 800439a:	2000      	movs	r0, #0
 800439c:	f7ff ff38 	bl	8004210 <PCD8544_Write>
		PCD8544_Write(PCD8544_COMMAND, PCD8544_SETXADDR | PCD8544_UpdateXmin);
 80043a0:	4b1f      	ldr	r3, [pc, #124]	; (8004420 <PCD8544_Refresh+0xb8>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	4619      	mov	r1, r3
 80043ac:	2000      	movs	r0, #0
 80043ae:	f7ff ff2f 	bl	8004210 <PCD8544_Write>

		for (j = PCD8544_UpdateXmin; j <= PCD8544_UpdateXmax; j++) {
 80043b2:	4b1b      	ldr	r3, [pc, #108]	; (8004420 <PCD8544_Refresh+0xb8>)
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	71bb      	strb	r3, [r7, #6]
 80043b8:	e00e      	b.n	80043d8 <PCD8544_Refresh+0x70>
			PCD8544_Write(PCD8544_DATA, PCD8544_Buffer[(i * PCD8544_WIDTH) + j]);
 80043ba:	79fb      	ldrb	r3, [r7, #7]
 80043bc:	2254      	movs	r2, #84	; 0x54
 80043be:	fb02 f203 	mul.w	r2, r2, r3
 80043c2:	79bb      	ldrb	r3, [r7, #6]
 80043c4:	4413      	add	r3, r2
 80043c6:	4a17      	ldr	r2, [pc, #92]	; (8004424 <PCD8544_Refresh+0xbc>)
 80043c8:	5cd3      	ldrb	r3, [r2, r3]
 80043ca:	4619      	mov	r1, r3
 80043cc:	2001      	movs	r0, #1
 80043ce:	f7ff ff1f 	bl	8004210 <PCD8544_Write>
		for (j = PCD8544_UpdateXmin; j <= PCD8544_UpdateXmax; j++) {
 80043d2:	79bb      	ldrb	r3, [r7, #6]
 80043d4:	3301      	adds	r3, #1
 80043d6:	71bb      	strb	r3, [r7, #6]
 80043d8:	4b13      	ldr	r3, [pc, #76]	; (8004428 <PCD8544_Refresh+0xc0>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	79ba      	ldrb	r2, [r7, #6]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d9eb      	bls.n	80043ba <PCD8544_Refresh+0x52>
 80043e2:	e000      	b.n	80043e6 <PCD8544_Refresh+0x7e>
			continue;
 80043e4:	bf00      	nop
	for (i = 0; i < 6; i++) {
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	3301      	adds	r3, #1
 80043ea:	71fb      	strb	r3, [r7, #7]
 80043ec:	79fb      	ldrb	r3, [r7, #7]
 80043ee:	2b05      	cmp	r3, #5
 80043f0:	d9c0      	bls.n	8004374 <PCD8544_Refresh+0xc>
 80043f2:	e000      	b.n	80043f6 <PCD8544_Refresh+0x8e>
			break;
 80043f4:	bf00      	nop
		}
	}

	PCD8544_UpdateXmin = PCD8544_WIDTH - 1;
 80043f6:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <PCD8544_Refresh+0xb8>)
 80043f8:	2253      	movs	r2, #83	; 0x53
 80043fa:	701a      	strb	r2, [r3, #0]
	PCD8544_UpdateXmax = 0;
 80043fc:	4b0a      	ldr	r3, [pc, #40]	; (8004428 <PCD8544_Refresh+0xc0>)
 80043fe:	2200      	movs	r2, #0
 8004400:	701a      	strb	r2, [r3, #0]
	PCD8544_UpdateYmin = PCD8544_HEIGHT - 1;
 8004402:	4b05      	ldr	r3, [pc, #20]	; (8004418 <PCD8544_Refresh+0xb0>)
 8004404:	222f      	movs	r2, #47	; 0x2f
 8004406:	701a      	strb	r2, [r3, #0]
	PCD8544_UpdateYmax = 0;
 8004408:	4b04      	ldr	r3, [pc, #16]	; (800441c <PCD8544_Refresh+0xb4>)
 800440a:	2200      	movs	r2, #0
 800440c:	701a      	strb	r2, [r3, #0]
}
 800440e:	bf00      	nop
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	2000002c 	.word	0x2000002c
 800441c:	2000002d 	.word	0x2000002d
 8004420:	2000002a 	.word	0x2000002a
 8004424:	200001f0 	.word	0x200001f0
 8004428:	2000002b 	.word	0x2000002b

0800442c <PCD8544_UpdateArea>:

void PCD8544_UpdateArea(unsigned char xMin, unsigned char yMin, unsigned char xMax, unsigned char yMax) {
 800442c:	b490      	push	{r4, r7}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	4604      	mov	r4, r0
 8004434:	4608      	mov	r0, r1
 8004436:	4611      	mov	r1, r2
 8004438:	461a      	mov	r2, r3
 800443a:	4623      	mov	r3, r4
 800443c:	71fb      	strb	r3, [r7, #7]
 800443e:	4603      	mov	r3, r0
 8004440:	71bb      	strb	r3, [r7, #6]
 8004442:	460b      	mov	r3, r1
 8004444:	717b      	strb	r3, [r7, #5]
 8004446:	4613      	mov	r3, r2
 8004448:	713b      	strb	r3, [r7, #4]
	if (xMin < PCD8544_UpdateXmin) {
 800444a:	4b12      	ldr	r3, [pc, #72]	; (8004494 <PCD8544_UpdateArea+0x68>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	79fa      	ldrb	r2, [r7, #7]
 8004450:	429a      	cmp	r2, r3
 8004452:	d202      	bcs.n	800445a <PCD8544_UpdateArea+0x2e>
		PCD8544_UpdateXmin = xMin;
 8004454:	4a0f      	ldr	r2, [pc, #60]	; (8004494 <PCD8544_UpdateArea+0x68>)
 8004456:	79fb      	ldrb	r3, [r7, #7]
 8004458:	7013      	strb	r3, [r2, #0]
	}
	if (xMax > PCD8544_UpdateXmax) {
 800445a:	4b0f      	ldr	r3, [pc, #60]	; (8004498 <PCD8544_UpdateArea+0x6c>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	797a      	ldrb	r2, [r7, #5]
 8004460:	429a      	cmp	r2, r3
 8004462:	d902      	bls.n	800446a <PCD8544_UpdateArea+0x3e>
		PCD8544_UpdateXmax = xMax;
 8004464:	4a0c      	ldr	r2, [pc, #48]	; (8004498 <PCD8544_UpdateArea+0x6c>)
 8004466:	797b      	ldrb	r3, [r7, #5]
 8004468:	7013      	strb	r3, [r2, #0]
	}
	if (yMin < PCD8544_UpdateYmin) {
 800446a:	4b0c      	ldr	r3, [pc, #48]	; (800449c <PCD8544_UpdateArea+0x70>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	79ba      	ldrb	r2, [r7, #6]
 8004470:	429a      	cmp	r2, r3
 8004472:	d202      	bcs.n	800447a <PCD8544_UpdateArea+0x4e>
		PCD8544_UpdateYmin = yMin;
 8004474:	4a09      	ldr	r2, [pc, #36]	; (800449c <PCD8544_UpdateArea+0x70>)
 8004476:	79bb      	ldrb	r3, [r7, #6]
 8004478:	7013      	strb	r3, [r2, #0]
	}
	if (yMax > PCD8544_UpdateYmax) {
 800447a:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <PCD8544_UpdateArea+0x74>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	793a      	ldrb	r2, [r7, #4]
 8004480:	429a      	cmp	r2, r3
 8004482:	d902      	bls.n	800448a <PCD8544_UpdateArea+0x5e>
		PCD8544_UpdateYmax = yMax;
 8004484:	4a06      	ldr	r2, [pc, #24]	; (80044a0 <PCD8544_UpdateArea+0x74>)
 8004486:	793b      	ldrb	r3, [r7, #4]
 8004488:	7013      	strb	r3, [r2, #0]
	}
}
 800448a:	bf00      	nop
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bc90      	pop	{r4, r7}
 8004492:	4770      	bx	lr
 8004494:	2000002a 	.word	0x2000002a
 8004498:	2000002b 	.word	0x2000002b
 800449c:	2000002c 	.word	0x2000002c
 80044a0:	2000002d 	.word	0x2000002d

080044a4 <PCD8544_GotoXY>:

void PCD8544_GotoXY(unsigned char x, unsigned char y) {
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	460a      	mov	r2, r1
 80044ae:	71fb      	strb	r3, [r7, #7]
 80044b0:	4613      	mov	r3, r2
 80044b2:	71bb      	strb	r3, [r7, #6]
	PCD8544_x = x;
 80044b4:	4a05      	ldr	r2, [pc, #20]	; (80044cc <PCD8544_GotoXY+0x28>)
 80044b6:	79fb      	ldrb	r3, [r7, #7]
 80044b8:	7013      	strb	r3, [r2, #0]
	PCD8544_y = y;
 80044ba:	4a05      	ldr	r2, [pc, #20]	; (80044d0 <PCD8544_GotoXY+0x2c>)
 80044bc:	79bb      	ldrb	r3, [r7, #6]
 80044be:	7013      	strb	r3, [r2, #0]
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	200001ed 	.word	0x200001ed
 80044d0:	200001ec 	.word	0x200001ec

080044d4 <PCD8544_Putc>:

void PCD8544_Putc(char c, PCD8544_Pixel_t color, PCD8544_FontSize_t size) {
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	71fb      	strb	r3, [r7, #7]
 80044de:	460b      	mov	r3, r1
 80044e0:	71bb      	strb	r3, [r7, #6]
 80044e2:	4613      	mov	r3, r2
 80044e4:	717b      	strb	r3, [r7, #5]
	unsigned char c_height, c_width, i, b, j;
	if (size == PCD8544_FontSize_3x5) {
 80044e6:	797b      	ldrb	r3, [r7, #5]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d104      	bne.n	80044f6 <PCD8544_Putc+0x22>
		c_width = PCD8544_CHAR3x5_WIDTH;
 80044ec:	2304      	movs	r3, #4
 80044ee:	73bb      	strb	r3, [r7, #14]
		c_height = PCD8544_CHAR3x5_HEIGHT;
 80044f0:	2306      	movs	r3, #6
 80044f2:	73fb      	strb	r3, [r7, #15]
 80044f4:	e003      	b.n	80044fe <PCD8544_Putc+0x2a>
	} else {
		c_width = PCD8544_CHAR5x7_WIDTH;
 80044f6:	2306      	movs	r3, #6
 80044f8:	73bb      	strb	r3, [r7, #14]
		c_height = PCD8544_CHAR5x7_HEIGHT;
 80044fa:	2308      	movs	r3, #8
 80044fc:	73fb      	strb	r3, [r7, #15]
	}
	if ((PCD8544_x + c_width) > PCD8544_WIDTH) {
 80044fe:	4b47      	ldr	r3, [pc, #284]	; (800461c <PCD8544_Putc+0x148>)
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	7bbb      	ldrb	r3, [r7, #14]
 8004506:	4413      	add	r3, r2
 8004508:	2b54      	cmp	r3, #84	; 0x54
 800450a:	dd09      	ble.n	8004520 <PCD8544_Putc+0x4c>
		//If at the end of a line of display, go to new line and set x to 0 position
		PCD8544_y += c_height;
 800450c:	4b44      	ldr	r3, [pc, #272]	; (8004620 <PCD8544_Putc+0x14c>)
 800450e:	781a      	ldrb	r2, [r3, #0]
 8004510:	7bfb      	ldrb	r3, [r7, #15]
 8004512:	4413      	add	r3, r2
 8004514:	b2da      	uxtb	r2, r3
 8004516:	4b42      	ldr	r3, [pc, #264]	; (8004620 <PCD8544_Putc+0x14c>)
 8004518:	701a      	strb	r2, [r3, #0]
		PCD8544_x = 0;
 800451a:	4b40      	ldr	r3, [pc, #256]	; (800461c <PCD8544_Putc+0x148>)
 800451c:	2200      	movs	r2, #0
 800451e:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < c_width - 1; i++) {
 8004520:	2300      	movs	r3, #0
 8004522:	737b      	strb	r3, [r7, #13]
 8004524:	e06b      	b.n	80045fe <PCD8544_Putc+0x12a>
		if (c < 32) {
 8004526:	79fb      	ldrb	r3, [r7, #7]
 8004528:	2b1f      	cmp	r3, #31
 800452a:	d91c      	bls.n	8004566 <PCD8544_Putc+0x92>
			//b = _custom_chars[_font_size][(uint8_t)chr][i];
		} else if (size == PCD8544_FontSize_3x5) {
 800452c:	797b      	ldrb	r3, [r7, #5]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d10c      	bne.n	800454c <PCD8544_Putc+0x78>
			b = PCD8544_Font3x5[c - 32][i];
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	f1a3 0220 	sub.w	r2, r3, #32
 8004538:	7b79      	ldrb	r1, [r7, #13]
 800453a:	483a      	ldr	r0, [pc, #232]	; (8004624 <PCD8544_Putc+0x150>)
 800453c:	4613      	mov	r3, r2
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	4413      	add	r3, r2
 8004542:	4403      	add	r3, r0
 8004544:	440b      	add	r3, r1
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	733b      	strb	r3, [r7, #12]
 800454a:	e00c      	b.n	8004566 <PCD8544_Putc+0x92>
		} else {
			b = PCD8544_Font5x7[c - 32][i];
 800454c:	79fb      	ldrb	r3, [r7, #7]
 800454e:	f1a3 0220 	sub.w	r2, r3, #32
 8004552:	7b79      	ldrb	r1, [r7, #13]
 8004554:	4834      	ldr	r0, [pc, #208]	; (8004628 <PCD8544_Putc+0x154>)
 8004556:	4613      	mov	r3, r2
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	4413      	add	r3, r2
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	4403      	add	r3, r0
 8004560:	440b      	add	r3, r1
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	733b      	strb	r3, [r7, #12]
		}
		if (b == 0x00 && (c != 0 && c != 32)) {
 8004566:	7b3b      	ldrb	r3, [r7, #12]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d105      	bne.n	8004578 <PCD8544_Putc+0xa4>
 800456c:	79fb      	ldrb	r3, [r7, #7]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <PCD8544_Putc+0xa4>
 8004572:	79fb      	ldrb	r3, [r7, #7]
 8004574:	2b20      	cmp	r3, #32
 8004576:	d13e      	bne.n	80045f6 <PCD8544_Putc+0x122>
			continue;
		}
		for (j = 0; j < c_height; j++) {
 8004578:	2300      	movs	r3, #0
 800457a:	72fb      	strb	r3, [r7, #11]
 800457c:	e030      	b.n	80045e0 <PCD8544_Putc+0x10c>
			if (color == PCD8544_Pixel_Set) {
 800457e:	79bb      	ldrb	r3, [r7, #6]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d115      	bne.n	80045b0 <PCD8544_Putc+0xdc>
				PCD8544_DrawPixel(PCD8544_x, (PCD8544_y + j), ((b >> j) & 1) ? PCD8544_Pixel_Set : PCD8544_Pixel_Clear);
 8004584:	4b25      	ldr	r3, [pc, #148]	; (800461c <PCD8544_Putc+0x148>)
 8004586:	7818      	ldrb	r0, [r3, #0]
 8004588:	4b25      	ldr	r3, [pc, #148]	; (8004620 <PCD8544_Putc+0x14c>)
 800458a:	781a      	ldrb	r2, [r3, #0]
 800458c:	7afb      	ldrb	r3, [r7, #11]
 800458e:	4413      	add	r3, r2
 8004590:	b2d9      	uxtb	r1, r3
 8004592:	7b3a      	ldrb	r2, [r7, #12]
 8004594:	7afb      	ldrb	r3, [r7, #11]
 8004596:	fa42 f303 	asr.w	r3, r2, r3
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	bf14      	ite	ne
 80045a2:	2301      	movne	r3, #1
 80045a4:	2300      	moveq	r3, #0
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	461a      	mov	r2, r3
 80045aa:	f7ff fe55 	bl	8004258 <PCD8544_DrawPixel>
 80045ae:	e014      	b.n	80045da <PCD8544_Putc+0x106>
			} else {
				PCD8544_DrawPixel(PCD8544_x, (PCD8544_y + j), ((b >> j) & 1) ? PCD8544_Pixel_Clear : PCD8544_Pixel_Set);
 80045b0:	4b1a      	ldr	r3, [pc, #104]	; (800461c <PCD8544_Putc+0x148>)
 80045b2:	7818      	ldrb	r0, [r3, #0]
 80045b4:	4b1a      	ldr	r3, [pc, #104]	; (8004620 <PCD8544_Putc+0x14c>)
 80045b6:	781a      	ldrb	r2, [r3, #0]
 80045b8:	7afb      	ldrb	r3, [r7, #11]
 80045ba:	4413      	add	r3, r2
 80045bc:	b2d9      	uxtb	r1, r3
 80045be:	7b3a      	ldrb	r2, [r7, #12]
 80045c0:	7afb      	ldrb	r3, [r7, #11]
 80045c2:	fa42 f303 	asr.w	r3, r2, r3
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	bf0c      	ite	eq
 80045ce:	2301      	moveq	r3, #1
 80045d0:	2300      	movne	r3, #0
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	461a      	mov	r2, r3
 80045d6:	f7ff fe3f 	bl	8004258 <PCD8544_DrawPixel>
		for (j = 0; j < c_height; j++) {
 80045da:	7afb      	ldrb	r3, [r7, #11]
 80045dc:	3301      	adds	r3, #1
 80045de:	72fb      	strb	r3, [r7, #11]
 80045e0:	7afa      	ldrb	r2, [r7, #11]
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d3ca      	bcc.n	800457e <PCD8544_Putc+0xaa>
			}
		}
		PCD8544_x++;
 80045e8:	4b0c      	ldr	r3, [pc, #48]	; (800461c <PCD8544_Putc+0x148>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	3301      	adds	r3, #1
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	4b0a      	ldr	r3, [pc, #40]	; (800461c <PCD8544_Putc+0x148>)
 80045f2:	701a      	strb	r2, [r3, #0]
 80045f4:	e000      	b.n	80045f8 <PCD8544_Putc+0x124>
			continue;
 80045f6:	bf00      	nop
	for (i = 0; i < c_width - 1; i++) {
 80045f8:	7b7b      	ldrb	r3, [r7, #13]
 80045fa:	3301      	adds	r3, #1
 80045fc:	737b      	strb	r3, [r7, #13]
 80045fe:	7b7a      	ldrb	r2, [r7, #13]
 8004600:	7bbb      	ldrb	r3, [r7, #14]
 8004602:	3b01      	subs	r3, #1
 8004604:	429a      	cmp	r2, r3
 8004606:	db8e      	blt.n	8004526 <PCD8544_Putc+0x52>
	}
	PCD8544_x++;
 8004608:	4b04      	ldr	r3, [pc, #16]	; (800461c <PCD8544_Putc+0x148>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	3301      	adds	r3, #1
 800460e:	b2da      	uxtb	r2, r3
 8004610:	4b02      	ldr	r3, [pc, #8]	; (800461c <PCD8544_Putc+0x148>)
 8004612:	701a      	strb	r2, [r3, #0]
}
 8004614:	bf00      	nop
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	200001ed 	.word	0x200001ed
 8004620:	200001ec 	.word	0x200001ec
 8004624:	08004b34 	.word	0x08004b34
 8004628:	080048ec 	.word	0x080048ec

0800462c <PCD8544_Puts>:

void PCD8544_Puts(char *c, PCD8544_Pixel_t color, PCD8544_FontSize_t size) {
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	460b      	mov	r3, r1
 8004636:	70fb      	strb	r3, [r7, #3]
 8004638:	4613      	mov	r3, r2
 800463a:	70bb      	strb	r3, [r7, #2]
	while (*c) {
 800463c:	e008      	b.n	8004650 <PCD8544_Puts+0x24>
		PCD8544_Putc(*c++, color, size);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	1c5a      	adds	r2, r3, #1
 8004642:	607a      	str	r2, [r7, #4]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	78ba      	ldrb	r2, [r7, #2]
 8004648:	78f9      	ldrb	r1, [r7, #3]
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff ff42 	bl	80044d4 <PCD8544_Putc>
	while (*c) {
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1f2      	bne.n	800463e <PCD8544_Puts+0x12>
	}
}
 8004658:	bf00      	nop
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <PCD8544_DrawLine>:

void PCD8544_DrawLine(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1, PCD8544_Pixel_t color) {
 8004660:	b590      	push	{r4, r7, lr}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	4604      	mov	r4, r0
 8004668:	4608      	mov	r0, r1
 800466a:	4611      	mov	r1, r2
 800466c:	461a      	mov	r2, r3
 800466e:	4623      	mov	r3, r4
 8004670:	71fb      	strb	r3, [r7, #7]
 8004672:	4603      	mov	r3, r0
 8004674:	71bb      	strb	r3, [r7, #6]
 8004676:	460b      	mov	r3, r1
 8004678:	717b      	strb	r3, [r7, #5]
 800467a:	4613      	mov	r3, r2
 800467c:	713b      	strb	r3, [r7, #4]
	short dx, dy;
	short temp;

	if (x0 > x1) {
 800467e:	79fa      	ldrb	r2, [r7, #7]
 8004680:	797b      	ldrb	r3, [r7, #5]
 8004682:	429a      	cmp	r2, r3
 8004684:	d905      	bls.n	8004692 <PCD8544_DrawLine+0x32>
		temp = x1;
 8004686:	797b      	ldrb	r3, [r7, #5]
 8004688:	81fb      	strh	r3, [r7, #14]
		x1 = x0;
 800468a:	79fb      	ldrb	r3, [r7, #7]
 800468c:	717b      	strb	r3, [r7, #5]
		x0 = temp;
 800468e:	89fb      	ldrh	r3, [r7, #14]
 8004690:	71fb      	strb	r3, [r7, #7]
	}
	if (y0 > y1) {
 8004692:	79ba      	ldrb	r2, [r7, #6]
 8004694:	793b      	ldrb	r3, [r7, #4]
 8004696:	429a      	cmp	r2, r3
 8004698:	d905      	bls.n	80046a6 <PCD8544_DrawLine+0x46>
		temp = y1;
 800469a:	793b      	ldrb	r3, [r7, #4]
 800469c:	81fb      	strh	r3, [r7, #14]
		y1 = y0;
 800469e:	79bb      	ldrb	r3, [r7, #6]
 80046a0:	713b      	strb	r3, [r7, #4]
		y0 = temp;
 80046a2:	89fb      	ldrh	r3, [r7, #14]
 80046a4:	71bb      	strb	r3, [r7, #6]
	}

	dx = x1 - x0;
 80046a6:	797b      	ldrb	r3, [r7, #5]
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	79fb      	ldrb	r3, [r7, #7]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	81bb      	strh	r3, [r7, #12]
	dy = y1 - y0;
 80046b4:	793b      	ldrb	r3, [r7, #4]
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	79bb      	ldrb	r3, [r7, #6]
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	b29b      	uxth	r3, r3
 80046c0:	817b      	strh	r3, [r7, #10]

	if (dx == 0) {
 80046c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d113      	bne.n	80046f2 <PCD8544_DrawLine+0x92>
		do {
			PCD8544_DrawPixel(x0, y0, color);
 80046ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	bf14      	ite	ne
 80046d2:	2301      	movne	r3, #1
 80046d4:	2300      	moveq	r3, #0
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	79b9      	ldrb	r1, [r7, #6]
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	4618      	mov	r0, r3
 80046de:	f7ff fdbb 	bl	8004258 <PCD8544_DrawPixel>
			y0++;
 80046e2:	79bb      	ldrb	r3, [r7, #6]
 80046e4:	3301      	adds	r3, #1
 80046e6:	71bb      	strb	r3, [r7, #6]
		} while (y1 >= y0);
 80046e8:	793a      	ldrb	r2, [r7, #4]
 80046ea:	79bb      	ldrb	r3, [r7, #6]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d2ec      	bcs.n	80046ca <PCD8544_DrawLine+0x6a>
		return;
 80046f0:	e0a2      	b.n	8004838 <PCD8544_DrawLine+0x1d8>
	}
	if (dy == 0) {
 80046f2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d113      	bne.n	8004722 <PCD8544_DrawLine+0xc2>
		do {
			PCD8544_DrawPixel(x0, y0, color);
 80046fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	bf14      	ite	ne
 8004702:	2301      	movne	r3, #1
 8004704:	2300      	moveq	r3, #0
 8004706:	b2da      	uxtb	r2, r3
 8004708:	79b9      	ldrb	r1, [r7, #6]
 800470a:	79fb      	ldrb	r3, [r7, #7]
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff fda3 	bl	8004258 <PCD8544_DrawPixel>
			x0++;
 8004712:	79fb      	ldrb	r3, [r7, #7]
 8004714:	3301      	adds	r3, #1
 8004716:	71fb      	strb	r3, [r7, #7]
		} while (x1 >= x0);
 8004718:	797a      	ldrb	r2, [r7, #5]
 800471a:	79fb      	ldrb	r3, [r7, #7]
 800471c:	429a      	cmp	r2, r3
 800471e:	d2ec      	bcs.n	80046fa <PCD8544_DrawLine+0x9a>
		return;
 8004720:	e08a      	b.n	8004838 <PCD8544_DrawLine+0x1d8>
	}

	/* Based on Bresenham's line algorithm  */
	if (dx > dy) {
 8004722:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004726:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800472a:	429a      	cmp	r2, r3
 800472c:	dd42      	ble.n	80047b4 <PCD8544_DrawLine+0x154>
		temp = 2 * dy - dx;
 800472e:	897b      	ldrh	r3, [r7, #10]
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	89bb      	ldrh	r3, [r7, #12]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	b29b      	uxth	r3, r3
 800473a:	81fb      	strh	r3, [r7, #14]
		while (x0 != x1) {
 800473c:	e029      	b.n	8004792 <PCD8544_DrawLine+0x132>
			PCD8544_DrawPixel(x0, y0, color);
 800473e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004742:	2b00      	cmp	r3, #0
 8004744:	bf14      	ite	ne
 8004746:	2301      	movne	r3, #1
 8004748:	2300      	moveq	r3, #0
 800474a:	b2da      	uxtb	r2, r3
 800474c:	79b9      	ldrb	r1, [r7, #6]
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff fd81 	bl	8004258 <PCD8544_DrawPixel>
			x0++;
 8004756:	79fb      	ldrb	r3, [r7, #7]
 8004758:	3301      	adds	r3, #1
 800475a:	71fb      	strb	r3, [r7, #7]
			if (temp > 0) {
 800475c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004760:	2b00      	cmp	r3, #0
 8004762:	dd0f      	ble.n	8004784 <PCD8544_DrawLine+0x124>
				y0++;
 8004764:	79bb      	ldrb	r3, [r7, #6]
 8004766:	3301      	adds	r3, #1
 8004768:	71bb      	strb	r3, [r7, #6]
				temp += 2 * dy - 2 * dx;
 800476a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800476e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	b29b      	uxth	r3, r3
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	b29a      	uxth	r2, r3
 800477a:	89fb      	ldrh	r3, [r7, #14]
 800477c:	4413      	add	r3, r2
 800477e:	b29b      	uxth	r3, r3
 8004780:	81fb      	strh	r3, [r7, #14]
 8004782:	e006      	b.n	8004792 <PCD8544_DrawLine+0x132>
			} else {
				temp += 2 * dy;
 8004784:	897b      	ldrh	r3, [r7, #10]
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	b29a      	uxth	r2, r3
 800478a:	89fb      	ldrh	r3, [r7, #14]
 800478c:	4413      	add	r3, r2
 800478e:	b29b      	uxth	r3, r3
 8004790:	81fb      	strh	r3, [r7, #14]
		while (x0 != x1) {
 8004792:	79fa      	ldrb	r2, [r7, #7]
 8004794:	797b      	ldrb	r3, [r7, #5]
 8004796:	429a      	cmp	r2, r3
 8004798:	d1d1      	bne.n	800473e <PCD8544_DrawLine+0xde>
			}
		}
		PCD8544_DrawPixel(x0, y0, color);
 800479a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	bf14      	ite	ne
 80047a2:	2301      	movne	r3, #1
 80047a4:	2300      	moveq	r3, #0
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	79b9      	ldrb	r1, [r7, #6]
 80047aa:	79fb      	ldrb	r3, [r7, #7]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7ff fd53 	bl	8004258 <PCD8544_DrawPixel>
 80047b2:	e041      	b.n	8004838 <PCD8544_DrawLine+0x1d8>
	} else {
		temp = 2 * dx - dy;
 80047b4:	89bb      	ldrh	r3, [r7, #12]
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	897b      	ldrh	r3, [r7, #10]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	b29b      	uxth	r3, r3
 80047c0:	81fb      	strh	r3, [r7, #14]
		while (y0 != y1) {
 80047c2:	e029      	b.n	8004818 <PCD8544_DrawLine+0x1b8>
			PCD8544_DrawPixel(x0, y0, color);
 80047c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	bf14      	ite	ne
 80047cc:	2301      	movne	r3, #1
 80047ce:	2300      	moveq	r3, #0
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	79b9      	ldrb	r1, [r7, #6]
 80047d4:	79fb      	ldrb	r3, [r7, #7]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7ff fd3e 	bl	8004258 <PCD8544_DrawPixel>
			y0++;
 80047dc:	79bb      	ldrb	r3, [r7, #6]
 80047de:	3301      	adds	r3, #1
 80047e0:	71bb      	strb	r3, [r7, #6]
			if (temp > 0) {
 80047e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	dd0f      	ble.n	800480a <PCD8544_DrawLine+0x1aa>
				x0++;
 80047ea:	79fb      	ldrb	r3, [r7, #7]
 80047ec:	3301      	adds	r3, #1
 80047ee:	71fb      	strb	r3, [r7, #7]
				temp += 2 * dy - 2 * dx;
 80047f0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80047f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	b29a      	uxth	r2, r3
 8004800:	89fb      	ldrh	r3, [r7, #14]
 8004802:	4413      	add	r3, r2
 8004804:	b29b      	uxth	r3, r3
 8004806:	81fb      	strh	r3, [r7, #14]
 8004808:	e006      	b.n	8004818 <PCD8544_DrawLine+0x1b8>
			} else {
				temp += 2 * dy;
 800480a:	897b      	ldrh	r3, [r7, #10]
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	b29a      	uxth	r2, r3
 8004810:	89fb      	ldrh	r3, [r7, #14]
 8004812:	4413      	add	r3, r2
 8004814:	b29b      	uxth	r3, r3
 8004816:	81fb      	strh	r3, [r7, #14]
		while (y0 != y1) {
 8004818:	79ba      	ldrb	r2, [r7, #6]
 800481a:	793b      	ldrb	r3, [r7, #4]
 800481c:	429a      	cmp	r2, r3
 800481e:	d1d1      	bne.n	80047c4 <PCD8544_DrawLine+0x164>
			}
		}
		PCD8544_DrawPixel(x0, y0, color);
 8004820:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004824:	2b00      	cmp	r3, #0
 8004826:	bf14      	ite	ne
 8004828:	2301      	movne	r3, #1
 800482a:	2300      	moveq	r3, #0
 800482c:	b2da      	uxtb	r2, r3
 800482e:	79b9      	ldrb	r1, [r7, #6]
 8004830:	79fb      	ldrb	r3, [r7, #7]
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff fd10 	bl	8004258 <PCD8544_DrawPixel>
	}
}
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	bd90      	pop	{r4, r7, pc}
	...

08004840 <__libc_init_array>:
 8004840:	b570      	push	{r4, r5, r6, lr}
 8004842:	4e0d      	ldr	r6, [pc, #52]	; (8004878 <__libc_init_array+0x38>)
 8004844:	4c0d      	ldr	r4, [pc, #52]	; (800487c <__libc_init_array+0x3c>)
 8004846:	1ba4      	subs	r4, r4, r6
 8004848:	10a4      	asrs	r4, r4, #2
 800484a:	2500      	movs	r5, #0
 800484c:	42a5      	cmp	r5, r4
 800484e:	d109      	bne.n	8004864 <__libc_init_array+0x24>
 8004850:	4e0b      	ldr	r6, [pc, #44]	; (8004880 <__libc_init_array+0x40>)
 8004852:	4c0c      	ldr	r4, [pc, #48]	; (8004884 <__libc_init_array+0x44>)
 8004854:	f000 f820 	bl	8004898 <_init>
 8004858:	1ba4      	subs	r4, r4, r6
 800485a:	10a4      	asrs	r4, r4, #2
 800485c:	2500      	movs	r5, #0
 800485e:	42a5      	cmp	r5, r4
 8004860:	d105      	bne.n	800486e <__libc_init_array+0x2e>
 8004862:	bd70      	pop	{r4, r5, r6, pc}
 8004864:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004868:	4798      	blx	r3
 800486a:	3501      	adds	r5, #1
 800486c:	e7ee      	b.n	800484c <__libc_init_array+0xc>
 800486e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004872:	4798      	blx	r3
 8004874:	3501      	adds	r5, #1
 8004876:	e7f2      	b.n	800485e <__libc_init_array+0x1e>
 8004878:	08004c74 	.word	0x08004c74
 800487c:	08004c74 	.word	0x08004c74
 8004880:	08004c74 	.word	0x08004c74
 8004884:	08004c78 	.word	0x08004c78

08004888 <memset>:
 8004888:	4402      	add	r2, r0
 800488a:	4603      	mov	r3, r0
 800488c:	4293      	cmp	r3, r2
 800488e:	d100      	bne.n	8004892 <memset+0xa>
 8004890:	4770      	bx	lr
 8004892:	f803 1b01 	strb.w	r1, [r3], #1
 8004896:	e7f9      	b.n	800488c <memset+0x4>

08004898 <_init>:
 8004898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489a:	bf00      	nop
 800489c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800489e:	bc08      	pop	{r3}
 80048a0:	469e      	mov	lr, r3
 80048a2:	4770      	bx	lr

080048a4 <_fini>:
 80048a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a6:	bf00      	nop
 80048a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048aa:	bc08      	pop	{r3}
 80048ac:	469e      	mov	lr, r3
 80048ae:	4770      	bx	lr
